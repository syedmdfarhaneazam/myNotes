<./eslint.config.js>
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...reactHooks.configs.recommended.rules,
      'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

<./src/indexedDb.js>
import { openDB } from "idb";

const DB_NAME = "MyNotesDB";
const STORE_NAME = "subjects";

export const initDB = async () => {
  return await openDB(DB_NAME, 1, {
    upgrade(db) {
      if (!db.objectStoreNames.contains(STORE_NAME)) {
        db.createObjectStore(STORE_NAME);
      }
    },
  });
};

export const saveSubjects = async (subjects) => {
  const db = await initDB();
  await db.put(STORE_NAME, subjects, "data");
};

export const getSubjects = async () => {
  const db = await initDB();
  return (await db.get(STORE_NAME, "data")) || null;
};

<./src/style/Navbar.css>
.navbar {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: var(--z-navbar);
  padding: var(--spacing-sm) var(--spacing-md);
  backdrop-filter: blur(4px);
  background: rgba(255, 255, 255, 0.08);
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  transition: all var(--transition-normal);
  font-family: var(--font-handwriting);
}

.navbar-brand {
  display: flex;
  align-items: center;
  gap: var(--spacing-lg);
  flex-shrink: 0;
  justify-content: space-between;
}

.navbar-brand h1 {
  font-family: var(--font-handwriting-bold);
  font-size: var(--font-size-subheading);
  font-weight: 700;
  margin: 0;
  animation: slideInLeft var(--transition-normal) ease-out;
  transition: font-size var(--transition-fast);
}

.navbar-menu {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  width: 100%;
  gap: var(--spacing-lg);
}

/* Desktop navbar */
.navbar-desktop {
  display: none;
  align-items: center;
  gap: var(--spacing-lg);
  width: 100%;
}

.navbar-controls {
  display: flex;
  align-items: center;
  gap: var(--spacing-md);
  flex-wrap: wrap;
}

.navbar-buttons {
  display: flex;
  gap: var(--spacing-sm);
  flex-wrap: wrap;
}

.nav-button {
  padding: var(--spacing-xs) var(--spacing-sm);
  border: none;
  border-radius: var(--border-radius-md);
  font-family: var(--font-handwriting);
  font-size: var(--font-size-small);
  font-weight: 500;
  cursor: pointer;
  transition: all var(--transition-fast);
  white-space: nowrap;
  position: relative;
  overflow: hidden;
}

.nav-button:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-md);
}

.nav-button:active {
  transform: translateY(0);
}

.navbar-right {
  display: flex;
  align-items: center;
  gap: var(--spacing-md);
  margin-left: auto;
}

.theme-selector {
  position: relative;
}

.theme-selector select {
  padding: var(--spacing-xs) var(--spacing-sm);
  border: 1px solid;
  border-radius: var(--border-radius-md);
  font-family: var(--font-handwriting);
  font-size: var(--font-size-small);
  cursor: pointer;
  transition: all var(--transition-fast);
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(4px);
}

.theme-selector select:hover {
  transform: translateY(-1px) scale(1.02);
  box-shadow: var(--shadow-sm);
  background: rgba(255, 255, 255, 0.15);
}

.theme-selector select:focus {
  outline: none;
  transform: translateY(-2px) scale(1.05);
  box-shadow: var(--shadow-md);
  z-index: var(--z-dropdown);
}

.nav-links {
  display: flex;
  gap: var(--spacing-md);
}

.nav-link {
  text-decoration: none;
  font-family: var(--font-handwriting);
  font-size: var(--font-size-content);
  font-weight: 500;
  padding: var(--spacing-xs) var(--spacing-sm);
  border-radius: var(--border-radius-md);
  transition: all var(--transition-fast);
  position: relative;
}

.nav-link:hover {
  transform: translateY(-2px);
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.nav-link::after {
  content: "";
  position: absolute;
  bottom: 0;
  left: 50%;
  width: 0;
  height: 2px;
  background: currentColor;
  transition: all var(--transition-fast);
  transform: translateX(-50%);
}

.nav-link:hover::after {
  width: 80%;
}

/* Normal sizing until 1250px */
@media (min-width: 750px) {
  .navbar {
    padding: var(--spacing-md) var(--spacing-xl);
  }

  .navbar-desktop {
    display: flex;
  }

  .navbar-brand {
    margin-right: var(--spacing-xl);
    display: flex;
    justify-content: space-between;
  }

  .nav-button {
    padding: var(--spacing-sm) var(--spacing-md);
    font-size: var(--font-size-content);
  }

  .nav-links {
    gap: var(--spacing-lg);
  }
}

/* Start reducing sizes from 1250px to 750px */
@media (max-width: 1250px) and (min-width: 750px) {
  .navbar {
    padding: calc(var(--spacing-md) * 0.8) calc(var(--spacing-xl) * 0.8);
  }

  .navbar-brand h1 {
    font-size: clamp(1.2rem, 3vw, var(--font-size-subheading));
  }

  .nav-button {
    padding: calc(var(--spacing-xs) * 0.8) calc(var(--spacing-sm) * 0.8);
    font-size: clamp(0.8rem, 2vw, var(--font-size-content));
  }

  .navbar-controls {
    gap: calc(var(--spacing-md) * 0.8);
  }

  .navbar-buttons {
    gap: calc(var(--spacing-sm) * 0.8);
  }

  .theme-selector select {
    padding: calc(var(--spacing-xs) * 0.8) calc(var(--spacing-sm) * 0.8);
    font-size: clamp(0.8rem, 2vw, var(--font-size-small));
  }

  .nav-links {
    gap: calc(var(--spacing-md) * 0.8);
  }

  .nav-link {
    font-size: clamp(0.9rem, 2vw, var(--font-size-content));
    padding: calc(var(--spacing-xs) * 0.8) calc(var(--spacing-sm) * 0.8);
  }
}

@media (min-width: 1024px) {
  .navbar-buttons {
    gap: var(--spacing-md);
  }

  .navbar-controls {
    gap: var(--spacing-xl);
  }
}

<./src/style/ProfilePage.css>
.profile-page {
  width: 100%;
  min-height: calc(100vh - 60px);
  padding: var(--spacing-xl);
  font-family: var(--font-handwriting);
  animation: fadeInUp var(--transition-slow) ease-out;
}

.profile-container {
  max-width: 800px;
  margin: 0 auto;
  background: rgba(255, 255, 255, 0.02);
  backdrop-filter: blur(4px);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: var(--border-radius-xl);
  padding: var(--spacing-2xl);
  box-shadow: var(--shadow-lg);
  animation: scaleIn var(--transition-normal) ease-out;
  animation-delay: 0.2s;
  animation-fill-mode: both;
}

.profile-container h2 {
  font-family: var(--font-handwriting-bold);
  font-size: var(--font-size-heading);
  font-weight: 700;
  margin: 0 0 var(--spacing-xl) 0;
  text-align: center;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  animation: slideInDown var(--transition-normal) ease-out;
  animation-delay: 0.3s;
  animation-fill-mode: both;
}

.profile-section {
  margin-bottom: var(--spacing-2xl);
  padding: var(--spacing-xl);
  background: rgba(255, 255, 255, 0.03);
  border: 1px solid rgba(255, 255, 255, 0.08);
  border-radius: var(--border-radius-lg);
  transition: all var(--transition-fast);
  animation: fadeInUp var(--transition-normal) ease-out;
  animation-delay: 0.4s;
  animation-fill-mode: both;
}

.profile-section:hover {
  transform: translateY(-2px);
  background: rgba(255, 255, 255, 0.05);
  border-color: rgba(255, 255, 255, 0.15);
  box-shadow: var(--shadow-md);
}

.profile-section h3 {
  font-family: var(--font-handwriting-bold);
  font-size: var(--font-size-subheading);
  font-weight: 600;
  margin: 0 0 var(--spacing-lg) 0;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.08);
}

.profile-section h4 {
  font-family: var(--font-handwriting-bold);
  font-size: var(--font-size-subsubheading);
  font-weight: 500;
  margin: 0 0 var(--spacing-sm) 0;
  opacity: 0.9;
}

.profile-section p {
  font-size: var(--font-size-content);
  line-height: 1.6;
  margin: 0 0 var(--spacing-md) 0;
  opacity: 0.8;
}

.input-group {
  display: flex;
  gap: var(--spacing-md);
  align-items: center;
  flex-wrap: wrap;
}

.input-group input {
  flex: 1;
  padding: var(--spacing-md);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: var(--border-radius-md);
  font-family: var(--font-handwriting);
  font-size: var(--font-size-content);
  transition: all var(--transition-fast);
  backdrop-filter: blur(2px);
  background: rgba(255, 255, 255, 0.05);
  min-width: 200px;
}

.input-group input:focus {
  outline: none;
  transform: scale(1.02);
  box-shadow: var(--shadow-sm);
  border-color: rgba(255, 255, 255, 0.4);
  background: rgba(255, 255, 255, 0.08);
}

.input-group input::placeholder {
  font-style: italic;
  opacity: 0.6;
}

.input-group button {
  padding: var(--spacing-md) var(--spacing-lg);
  border: none;
  border-radius: var(--border-radius-md);
  font-family: var(--font-handwriting);
  font-size: var(--font-size-content);
  font-weight: 500;
  cursor: pointer;
  transition: all var(--transition-fast);
  backdrop-filter: blur(4px);
  white-space: nowrap;
}

.input-group button:hover {
  transform: translateY(-2px) scale(1.05);
  box-shadow: var(--shadow-md);
}

.data-management {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: var(--spacing-xl);
  margin-top: var(--spacing-lg);
}

.export-section,
.import-section {
  padding: var(--spacing-lg);
  background: rgba(255, 255, 255, 0.02);
  border: 1px solid rgba(255, 255, 255, 0.05);
  border-radius: var(--border-radius-md);
  text-align: center;
  transition: all var(--transition-fast);
}

.export-section:hover,
.import-section:hover {
  background: rgba(255, 255, 255, 0.04);
  border-color: rgba(255, 255, 255, 0.1);
  transform: translateY(-1px);
}

.export-section button,
.import-button {
  display: inline-block;
  padding: var(--spacing-md) var(--spacing-xl);
  border: none;
  border-radius: var(--border-radius-lg);
  font-family: var(--font-handwriting);
  font-size: var(--font-size-content);
  font-weight: 500;
  cursor: pointer;
  transition: all var(--transition-fast);
  backdrop-filter: blur(4px);
  text-decoration: none;
  margin-top: var(--spacing-md);
}

.export-section button:hover,
.import-button:hover {
  transform: translateY(-2px) scale(1.05);
  box-shadow: var(--shadow-lg);
}

.status-message {
  margin-top: var(--spacing-md);
  padding: var(--spacing-sm) var(--spacing-md);
  border-radius: var(--border-radius-md);
  font-size: var(--font-size-small);
  font-weight: 500;
  text-align: center;
  animation: slideInUp var(--transition-fast) ease-out;
  background: rgba(34, 197, 94, 0.1);
  color: #22c55e;
  border: 1px solid rgba(34, 197, 94, 0.2);
}
.shortcuts-list {
  margin-top: var(--spacing-md);
  padding: var(--spacing-md);
  background: rgba(255, 255, 255, 0.03);
  border-radius: var(--border-radius-md);
}

.shortcuts-list p {
  margin: var(--spacing-sm) 0;
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
}

.shortcuts-list kbd {
  background: rgba(255, 255, 255, 0.1);
  padding: var(--spacing-xs) var(--spacing-sm);
  border-radius: var(--border-radius-sm);
  font-family: var(--font-mono);
  font-size: var(--font-size-small);
  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
}
/* Responsive adjustments */
@media (max-width: 768px) {
  .profile-page {
    padding: var(--spacing-lg);
    min-height: calc(100vh - 80px);
  }

  .profile-container {
    padding: var(--spacing-xl);
  }

  .profile-section {
    padding: var(--spacing-lg);
  }

  .data-management {
    grid-template-columns: 1fr;
    gap: var(--spacing-lg);
  }

  .input-group {
    flex-direction: column;
    align-items: stretch;
  }

  .input-group input {
    min-width: auto;
    width: 100%;
  }

  .input-group button {
    width: 100%;
  }
}

@media (max-width: 640px) {
  .profile-page {
    padding: var(--spacing-md);
  }

  .profile-container {
    padding: var(--spacing-lg);
  }

  .profile-section {
    padding: var(--spacing-md);
  }

  .profile-container h2 {
    font-size: var(--font-size-subheading);
  }

  .profile-section h3 {
    font-size: var(--font-size-subsubheading);
  }

  .export-section,
  .import-section {
    padding: var(--spacing-md);
  }
}

@media (max-width: 480px) {
  .profile-container {
    padding: var(--spacing-md);
  }

  .profile-section {
    padding: var(--spacing-sm);
  }

  .input-group input,
  .input-group button,
  .export-section button,
  .import-button {
    font-size: var(--font-size-small);
    padding: var(--spacing-sm) var(--spacing-md);
  }
}

<./src/style/SubHeading.css>
.subheading-container {
  background: transparent;
  border: none;
  border-bottom: 1.5px solid;
  border-radius: 0;
  padding: var(--spacing-xs) var(--spacing-xs);
  margin: 0;
  position: relative;
  animation: fadeInUp var(--transition-normal) ease-out;
  animation-delay: 0.1s;
  animation-fill-mode: both;
  transition: all var(--transition-fast);
  width: 95vw;
  display: flex;
  align-items: flex-start;
  justify-content: space-between;
  gap: var(--spacing-md);
}

.subheading-content {
  flex: 1;
  min-width: 0;
}

.subheading-container h3 {
  margin: 0;
  font-family: var(--font-handwriting-bold);
  font-weight: 600;
  width: 80%;
}

.subheading-input {
  width: 100%;
  background: transparent;
  border: none;
  outline: none;
  font-family: var(--font-handwriting-bold);
  font-size: var(--font-size-subheading);
  font-weight: 600;
  /* line-height: 1.3; */
  resize: none;
  overflow: hidden;
  padding: 0;
  margin: 0;
  transition: all var(--transition-fast);
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.08);
}

.subheading-input::placeholder {
  opacity: 0.6;
  font-style: italic;
}

.subheading-input:focus {
  outline: none;
  transform: scale(1.01);
}

.subheading-comment-display {
  margin-top: var(--spacing-sm);
  font-size: var(--font-size-small);
  font-style: italic;
  opacity: 0.8;
  animation: fadeInDown var(--transition-fast) ease-out;
}

.subheading-controls {
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);
  opacity: 0;
  transform: translateX(8px);
  transition: all var(--transition-fast);
  flex-shrink: 0;
  margin-left: auto;
}

.subheading-container:hover .subheading-controls,
.subheading-container:focus-within .subheading-controls {
  opacity: 1;
  transform: translateX(0);
}

.subheading-controls button {
  padding: var(--spacing-xs) var(--spacing-sm);
  border: 1px solid rgba(255, 255, 255, 0.15);
  border-radius: var(--border-radius-sm);
  background: rgba(255, 255, 255, 0.08);
  cursor: pointer;
  font-size: var(--font-size-small);
  transition: all var(--transition-fast);
  backdrop-filter: blur(2px);
}

.subheading-controls button:hover {
  transform: translateY(-1px) scale(1.03);
  box-shadow: var(--shadow-sm);
}

.subheading-comment-enter {
  position: absolute;
  top: 100%;
  left: var(--spacing-lg);
  right: var(--spacing-lg);
  margin-top: var(--spacing-sm);
  padding: var(--spacing-sm);
  border: 1px solid;
  border-radius: var(--border-radius-md);
  font-family: var(--font-handwriting);
  font-size: var(--font-size-small);
  transition: all var(--transition-fast);
  animation: slideInDown var(--transition-fast) ease-out;
  z-index: 10;
}

.subheading-comment-enter:focus {
  transform: scale(1.01);
  box-shadow: var(--shadow-sm);
}

/* Responsive adjustments */
@media (max-width: 640px) {
  .subheading-input {
    font-size: clamp(1.25rem, 5vw, 2rem);
  }

  .subheading-controls {
    flex-wrap: wrap;
    gap: var(--spacing-xs);
  }

  .subheading-controls button {
    font-size: 0.75rem;
    padding: 2px var(--spacing-xs);
  }
}
@media (max-width: 1210px) {
  .subheading-controls {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-xs);
    margin-left: -10px;
    margin-right: -10px;
  }
  .subheading-controls button {
    padding: var(--spacing-xs) var(--spacing-xs);
  }
  .subheading-comment-enter {
    position: absolute;
    width: 500%;
    transform: translateX(-100%) translateY(-100%);
  }
}

<./src/style/Heading.css>
.heading-container {
  background: transparent !important;
  padding: var(--spacing-xs) var(--spacing-xs);
  border: none;
  border-bottom: 1px solid;
  border-radius: 0;
  margin: 0;
  position: relative;
  animation: fadeInUp var(--transition-normal) ease-out;
  transition: all var(--transition-fast);
  width: 95vw;
  display: flex;
  align-items: flex-start;
  justify-content: space-between;
  gap: var(--spacing-md);
  z-index: 0;
}

.heading-content {
  flex: 1;
  min-width: 0;
}

.heading-container:hover {
  transform: translateY(-2px);
  border-bottom-width: 2px;
}

.heading-container h2 {
  margin: 0;
  font-family: var(--font-handwriting-bold);
  font-weight: 700;
  width: 100%;
}

.heading-input {
  width: 100%;
  background: transparent;
  border: none;
  outline: none;
  font-family: var(--font-handwriting-bold);
  font-size: var(--font-size-heading);
  font-weight: 700;
  resize: none;
  overflow: hidden;
  padding: 0;
  margin: 0;
  transition: all var(--transition-fast);
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}

.heading-input::placeholder {
  opacity: 0.6;
  font-style: italic;
}

.heading-input:focus {
  outline: none;
}

.heading-comment-display {
  margin-top: var(--spacing-sm);
  font-size: var(--font-size-small);
  font-style: italic;
  opacity: 0.8;
  animation: fadeInDown var(--transition-fast) ease-out;
}

.heading-controls {
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);
  opacity: 0;
  transform: translateX(10px);
  transition: all var(--transition-fast);
  flex-shrink: 0;
  margin-left: auto;
}

.heading-container:hover .heading-controls,
.heading-container:focus-within .heading-controls {
  opacity: 1;
  transform: translateX(0);
}

.heading-controls button {
  padding: var(--spacing-xs) var(--spacing-sm);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: var(--border-radius-md);
  background: rgba(255, 255, 255, 0.1);
  cursor: pointer;
  font-size: var(--font-size-small);
  transition: all var(--transition-fast);
  backdrop-filter: blur(4px);
}

.heading-controls button:hover {
  transform: translateY(-2px) scale(1.05);
  box-shadow: var(--shadow-md);
}

.heading-comment-enter {
  position: absolute;
  top: 100%;
  left: var(--spacing-lg);
  right: var(--spacing-lg);
  margin-top: var(--spacing-sm);
  padding: var(--spacing-sm);
  border: 1px solid;
  border-radius: var(--border-radius-md);
  font-family: var(--font-handwriting);
  font-size: var(--font-size-small);
  transition: all var(--transition-fast);
  animation: slideInDown var(--transition-fast) ease-out;
  z-index: 10;
}

/* Responsive adjustments */
@media (max-width: 640px) {
  .heading-input {
    font-size: clamp(1.5rem, 6vw, 2.5rem);
  }

  .heading-controls {
    flex-wrap: wrap;
    gap: var(--spacing-xs);
  }

  .heading-controls button {
    font-size: 0.75rem;
    padding: var(--spacing-xs);
  }
}
@media (max-width: 1210px) {
  .heading-controls {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-xs);
    margin-left: -10px;
    margin-right: -10px;
  }
  .heading-controls button {
    padding: var(--spacing-xs) var(--spacing-xs);
  }
  .heading-comment-enter {
    position: absolute;
    width: 500%;
    transform: translateX(0%) translateY(-100%);
  }
}

<./src/style/Help.css>
.help-overlay {
  position: fixed;
  inset: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1500;
  padding: var(--spacing-xl);
  animation: fadeIn var(--transition-normal) ease-out;
}

.help-modal {
  border-radius: var(--border-radius-xl);
  padding: var(--spacing-2xl);
  max-width: 600px;
  width: 100%;
  box-shadow: var(--shadow-lg);
  animation: scaleIn var(--transition-normal) ease-out;
  border: 1px solid;
  backdrop-filter: blur(12px);
}

.help-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-xl);
}

.help-title {
  font-family: var(--font-handwriting-bold);
  font-size: var(--font-size-subheading);
  font-weight: 600;
  margin: 0;
}

.help-close {
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  transition: all var(--transition-fast);
  width: 40px;
  height: 40px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.help-close:hover {
  background: rgba(0, 0, 0, 0.1);
  transform: scale(1.1);
}

.shortcuts-list p {
  font-size: var(--font-size-content);
  margin-bottom: var(--spacing-sm);
  display: flex;
  gap: var(--spacing-sm);
  align-items: center;
}

kbd {
  background: rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: var(--border-radius-sm);
  padding: 0.2rem 0.4rem;
  font-family: monospace;
  font-size: 0.9em;
  box-shadow: inset 0 -1px 0 rgba(255, 255, 255, 0.2);
}

<./src/style/global.css>
/* Import handwriting fonts and Font Awesome */
@import url("https://fonts.googleapis.com/css2?family=Kalam:wght@300;400;700&family=Caveat:wght@400;500;600;700&family=Patrick+Hand&display=swap");
@import url("https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css");

/* CSS Variables for theming and responsive design */
:root {
  /* Font families */
  --font-handwriting: "Kalam", "Caveat", "Patrick Hand", cursive;
  --font-handwriting-bold: "Caveat", cursive;

  /* Font sizes - responsive */
  --font-size-heading: clamp(1.6rem, 3.2vw, 2.8rem);
  --font-size-subheading: clamp(1.2rem, 2.4vw, 2rem);
  --font-size-subsubheading: clamp(1rem, 2vw, 1.6rem);
  --font-size-content: clamp(0.8rem, 1.6vw, 1rem);
  --font-size-code: clamp(0.7rem, 1.44vw, 0.9rem);
  --font-size-small: clamp(0.6rem, 1.2vw, 0.8rem);

  /* Spacing */
  --spacing-xs: 0.2rem;
  --spacing-sm: 0.4rem;
  --spacing-md: 0.8rem;
  --spacing-lg: 1.2rem;
  --spacing-xl: 1.6rem;
  --spacing-2xl: 2.4rem;

  /* Border radius */
  --border-radius-sm: 4px;
  --border-radius-md: 8px;
  --border-radius-lg: 12px;
  --border-radius-xl: 16px;

  /* Shadows */
  --shadow-sm: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  --shadow-md:
    0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
  --shadow-lg:
    0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);

  /* Transitions */
  --transition-fast: 0.15s ease-in-out;
  --transition-normal: 0.3s ease-in-out;
  --transition-slow: 0.5s ease-in-out;

  /* Breakpoints */
  --breakpoint-sm: 640px;
  --breakpoint-md: 750px; /* Updated to 750px */
  --breakpoint-lg: 1024px;
  --breakpoint-xl: 1280px;

  /* Z-index layers */
  --z-dropdown: 1500;
  --z-modal: 2500;
  --z-modal-overlay: 2000;
  --z-navbar: 1000;
  --z-color-picker: 1800; /* Higher z-index for color picker */
  --z-options: 1600;
}

/* Reset and base styles */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  scroll-behavior: smooth;
}

body {
  font-family: var(--font-handwriting);
  line-height: 1.6;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  overflow-x: hidden;
  /* Add dynamic background that will be set by theme */
  background-color: var(--theme-bg, #f9fafb);
  color: var(--theme-text, #111827);
  transition:
    background-color var(--transition-normal),
    color var(--transition-normal);
}

/* Animation keyframes */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes fadeInDown {
  from {
    opacity: 0;
    transform: translateY(-10px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInRight {
  from {
    opacity: 0;
    transform: translateX(20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes slideInLeft {
  from {
    opacity: 0;
    transform: translateX(-20px);
  }
  to {
    opacity: 1;
    transform: translateX(0);
  }
}

@keyframes scaleIn {
  from {
    opacity: 0;
    transform: scale(0.9);
  }
  to {
    opacity: 1;
    transform: scale(1);
  }
}

@keyframes expandOptions {
  from {
    opacity: 0;
    transform: scale(0.8) translateX(10px);
    max-width: 0;
  }
  to {
    opacity: 1;
    transform: scale(1) translateX(0);
    max-width: 300px;
  }
}

@keyframes collapseOptions {
  from {
    opacity: 1;
    transform: scale(1) translateX(0);
    max-width: 300px;
  }
  to {
    opacity: 0;
    transform: scale(0.8) translateX(10px);
    max-width: 0;
  }
}

/* Utility classes */
.fade-in-up {
  animation: fadeInUp var(--transition-normal) ease-out;
}

.fade-in-down {
  animation: fadeInDown var(--transition-normal) ease-out;
}

.slide-in-right {
  animation: slideInRight var(--transition-normal) ease-out;
}

.slide-in-left {
  animation: slideInLeft var(--transition-normal) ease-out;
}

.scale-in {
  animation: scaleIn var(--transition-normal) ease-out;
}

/* Scrollbar styling */
::-webkit-scrollbar {
  width: 8px;
}

::-webkit-scrollbar-track {
  background: transparent;
}

::-webkit-scrollbar-thumb {
  background: rgba(0, 0, 0, 0.2);
  border-radius: 4px;
}

::-webkit-scrollbar-thumb:hover {
  background: rgba(0, 0, 0, 0.3);
}

/* Focus styles */
*:focus {
  outline: 2px solid currentColor;
  outline-offset: 2px;
}

button:focus,
input:focus,
textarea:focus,
select:focus {
  outline: 2px solid var(--accent-color, #3b82f6);
  outline-offset: 2px;
}

<./src/style/NotesPage.css>
.notes-page {
  width: 100vw;
  min-height: calc(100vh - 60px);
  padding: 0;
  background: linear-gradient(
    135deg,
    rgba(255, 255, 255, 0.02) 0%,
    rgba(255, 255, 255, 0.01) 100%
  );
  position: relative;
}

.notes-page::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-image:
    linear-gradient(rgba(255, 255, 255, 0.03) 1px, transparent 1px),
    linear-gradient(90deg, rgba(255, 255, 255, 0.03) 1px, transparent 1px);
  background-size: 20px 20px;
  pointer-events: none;
  opacity: 0.3;
}

.notes-container {
  max-width: none;
  margin: 0;
  position: relative;
  z-index: 1;
}

.notes-inner {
  display: flex;
  flex-direction: column;
  gap: 0;
  text-align: left;
  padding: 0;
  width: 100%;
}

.empty-state {
  text-align: center;
  padding: var(--spacing-2xl);
  font-family: var(--font-handwriting);
  font-size: var(--font-size-content);
  animation: fadeInUp var(--transition-slow) ease-out;
}

.empty-state p {
  max-width: 400px;
  margin: 0 auto;
  line-height: 1.8;
}

/* Responsive adjustments */
@media (min-width: 640px) {
  .notes-page {
    padding: var(--spacing-lg);
  }

  .notes-inner {
    padding: var(--spacing-lg) var(--spacing-md);
  }
}
@media (max-width: 640px) {
  .notes-page {
    transform: translateY(2%);
  }

  .notes-inner {
    padding: var(--spacing-xs) var(--spacing-xs);
  }
}
@media (min-width: 768px) {
  .notes-page {
    min-height: calc(100vh - 80px);
    padding: var(--spacing-xl);
  }

  .notes-container {
    max-width: 1200px;
  }

  .notes-inner {
    padding: var(--spacing-xl) var(--spacing-lg);
    gap: var(--spacing-xl);
  }
}

@media (min-width: 1024px) {
  .notes-page {
    /* padding: var(--spacing-2xl); */
  }

  .notes-inner {
    /* padding: var(--spacing-2xl) var(--spacing-xl); */
  }
}

/* Add subtle paper texture */
.notes-page::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background-image: radial-gradient(
    circle at 1px 1px,
    rgba(255, 255, 255, 0.05) 1px,
    transparent 0
  );
  background-size: 20px 20px;
  pointer-events: none;
  opacity: 0.2;
}

<./src/style/OptionsButton.css>
.options-container {
  position: relative;
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);
}

.options-toggle {
  padding: var(--spacing-xs);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.1);
  cursor: pointer;
  font-size: var(--font-size-small);
  transition: all var(--transition-fast);
  backdrop-filter: blur(4px);
  width: 30px;
  height: 30px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: inherit;
}

.options-toggle:hover {
  transform: translateY(-1px) scale(1.1);
  box-shadow: var(--shadow-sm);
  background: rgba(255, 255, 255, 0.2);
}

.options-toggle.active {
  background: rgba(255, 255, 255, 0.3);
  transform: rotate(45deg);
}

.options-menu {
  position: absolute;
  top: 0;
  right: 35px;
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(8px);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: var(--border-radius-lg);
  padding: var(--spacing-xs);
  box-shadow: var(--shadow-md);
  z-index: var(--z-options);
  white-space: nowrap;
}

.options-menu.open {
  animation: expandOptions var(--transition-normal) ease-out;
}

.options-menu.closing {
  animation: collapseOptions var(--transition-normal) ease-out;
}

.options-menu button {
  padding: var(--spacing-xs);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: var(--border-radius-sm);
  background: rgba(255, 255, 255, 0.1);
  cursor: pointer;
  font-size: var(--font-size-small);
  transition: all var(--transition-fast);
  backdrop-filter: blur(2px);
  min-width: 28px;
  height: 28px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: inherit;
}

.options-menu button:hover {
  transform: translateY(-1px) scale(1.05);
  box-shadow: var(--shadow-sm);
  background: rgba(255, 255, 255, 0.2);
}

.options-menu button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
  transform: none;
}

/* Responsive adjustments */
@media (max-width: 640px) {
  .options-toggle {
    width: 25px;
    height: 25px;
    font-size: 0.7rem;
  }

  .options-menu {
    right: 30px;
    padding: 2px;
    gap: 2px;
  }

  .options-menu button {
    min-width: 24px;
    height: 24px;
    font-size: 0.7rem;
  }
}

/* Dark theme adjustments */
@media (prefers-color-scheme: dark) {
  .options-menu {
    background: rgba(31, 41, 55, 0.95);
    border-color: rgba(75, 85, 99, 0.3);
  }
}

<./src/style/Content.css>
.content-container {
  background: transparent;
  border: none;
  border-bottom: 0.5px solid rgba(255, 255, 255, 0.2);
  border-radius: 0;
  padding: var(--spacing-xs) var(--spacing-xs);
  margin: 0;
  position: relative;
  animation: fadeInUp var(--transition-normal) ease-out;
  animation-delay: 0.3s;
  animation-fill-mode: both;
  transition: all var(--transition-fast);
  width: 95vw;
  display: flex;
  align-items: flex-start;
  justify-content: space-between;
  gap: var(--spacing-md);
}

.content-container:hover {
  border-bottom-color: rgba(255, 255, 255, 0.4);
}

.content-content {
  flex: 1;
  min-width: 0;
}

.content-container p {
  margin: 0;
  font-family: var(--font-handwriting);
  width: 80%;
}

.content-input {
  width: 100%;
  background: transparent;
  border: none;
  outline: none;
  font-family: var(--font-handwriting);
  font-size: var(--font-size-content);
  font-weight: 400;
  line-height: 1.6;
  resize: none;
  overflow: hidden;
  padding: 0;
  margin: 0;
  transition: all var(--transition-fast);
  min-height: 1.5em;
}

.content-input::placeholder {
  opacity: 0.5;
  font-style: italic;
}

.content-input:focus {
  outline: none;
  transform: scale(1.002);
}

.content-comment-display {
  margin-top: var(--spacing-sm);
  font-size: var(--font-size-small);
  font-style: italic;
  opacity: 0.7;
  animation: fadeInDown var(--transition-fast) ease-out;
}

.content-controls {
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);
  opacity: 0;
  transform: translateX(4px);
  transition: all var(--transition-fast);
  flex-shrink: 0;
  margin-left: auto;
}

.content-container:hover .content-controls,
.content-container:focus-within .content-controls {
  opacity: 1;
  transform: translateX(0);
}

.content-controls button {
  padding: 2px var(--spacing-xs);
  border: 1px solid rgba(255, 255, 255, 0.08);
  border-radius: var(--border-radius-sm);
  background: rgba(255, 255, 255, 0.03);
  cursor: pointer;
  font-size: var(--font-size-small);
  transition: all var(--transition-fast);
  backdrop-filter: blur(1px);
}

.content-controls button:hover {
  transform: translateY(-1px) scale(1.02);
  background: rgba(255, 255, 255, 0.08);
}

.content-comment-enter {
  position: absolute;
  top: 100%;
  left: var(--spacing-lg);
  right: var(--spacing-lg);
  margin-top: var(--spacing-sm);
  padding: var(--spacing-sm);
  border: 1px solid;
  border-radius: var(--border-radius-md);
  font-family: var(--font-handwriting);
  font-size: var(--font-size-small);
  transition: all var(--transition-fast);
  animation: slideInDown var(--transition-fast) ease-out;
  z-index: 10;
}

.content-comment-enter:focus {
  /* transform: scale(1.002); */
  background: rgba(255, 255, 255, 0.05);
}

/* Responsive adjustments */
@media (max-width: 640px) {
  .content-input {
    font-size: clamp(1rem, 3.5vw, 1.25rem);
  }

  .content-controls {
    flex-wrap: wrap;
    gap: var(--spacing-xs);
  }

  .content-controls button {
    font-size: 0.7rem;
    padding: 1px 3px;
  }
}
@media (max-width: 1210px) {
  .content-controls {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-xs);
    margin-left: -10px;
    margin-right: -10px;
  }
  .content-controls button {
    padding: var(--spacing-xs) var(--spacing-xs);
  }
  .content-comment-enter {
    position: absolute;
    width: 500%;
    transform: translateX(-100%) translateY(-100%);
  }
}

<./src/style/SubSubHeading.css>
.subsubheading-container {
  background: transparent;
  border: none;
  border-bottom: 1px solid;
  border-radius: 0;
  padding: var(--spacing-xs) var(--spacing-xs);
  margin: 0;
  position: relative;
  animation: fadeInUp var(--transition-normal) ease-out;
  animation-delay: 0.2s;
  animation-fill-mode: both;
  transition: all var(--transition-fast);
  width: 95vw;
  display: flex;
  align-items: flex-start;
  justify-content: space-between;
  gap: var(--spacing-md);
}

.subsubheading-content {
  flex: 1;
  min-width: 0;
}

.subsubheading-container:hover {
  transform: translateY(-1px);
  border-bottom-width: 1.5px;
}

.subsubheading-container h4 {
  margin: 0;
  width: 80%;
  font-family: var(--font-handwriting-bold);
  font-weight: 500;
}

.subsubheading-input {
  width: 100%;
  background: transparent;
  border: none;
  outline: none;
  font-family: var(--font-handwriting-bold);
  font-size: var(--font-size-subsubheading);
  font-weight: 500;
  line-height: 1.4;
  resize: none;
  overflow: hidden;
  padding: 0;
  margin: 0;
  transition: all var(--transition-fast);
  text-shadow: 0 1px 1px rgba(0, 0, 0, 0.06);
}

.subsubheading-input::placeholder {
  opacity: 0.6;
  font-style: italic;
}

.subsubheading-input:focus {
  outline: none;
  transform: scale(1.005);
}

.subsubheading-comment-display {
  margin-top: var(--spacing-sm);
  font-size: var(--font-size-small);
  font-style: italic;
  opacity: 0.8;
  animation: fadeInDown var(--transition-fast) ease-out;
}

.subsubheading-controls {
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);
  opacity: 0;
  transform: translateX(6px);
  transition: all var(--transition-fast);
  flex-shrink: 0;
  margin-left: auto;
}

.subsubheading-container:hover .subsubheading-controls,
.subsubheading-container:focus-within .subsubheading-controls {
  opacity: 1;
  transform: translateX(0);
}

.subsubheading-controls button {
  padding: var(--spacing-xs);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: var(--border-radius-sm);
  background: rgba(255, 255, 255, 0.05);
  cursor: pointer;
  font-size: var(--font-size-small);
  transition: all var(--transition-fast);
  backdrop-filter: blur(2px);
}

.subsubheading-controls button:hover {
  transform: translateY(-1px) scale(1.02);
  box-shadow: var(--shadow-sm);
}

.subsubheading-comment-enter {
  position: absolute;
  top: 100%;
  left: var(--spacing-lg);
  right: var(--spacing-lg);
  margin-top: var(--spacing-sm);
  padding: var(--spacing-sm);
  border: 1px solid;
  border-radius: var(--border-radius-md);
  font-family: var(--font-handwriting);
  font-size: var(--font-size-small);
  transition: all var(--transition-fast);
  animation: slideInDown var(--transition-fast) ease-out;
  z-index: 10;
}

.subsubheading-comment-enter:focus {
  transform: scale(1.005);
  box-shadow: var(--shadow-sm);
}

/* Responsive adjustments */
@media (max-width: 640px) {
  .subsubheading-input {
    font-size: clamp(1.125rem, 4vw, 1.75rem);
  }

  .subsubheading-controls {
    flex-wrap: wrap;
    gap: var(--spacing-xs);
  }

  .subsubheading-controls button {
    font-size: 0.7rem;
    padding: 2px 4px;
  }
}
@media (max-width: 1210px) {
  .subsubheading-controls {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--spacing-xs);
    margin-left: -10px;
    margin-right: -10px;
  }
  .subsubheading-controls button {
    padding: var(--spacing-xs) var(--spacing-xs);
  }
  .subsubheading-comment-enter {
    position: absolute;
    width: 500%;
    transform: translateX(-100%) translateY(-100%);
  }
}

<./src/style/Code.css>
.code-container {
  background: transparent;
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 0;
  margin: 0;
  overflow: hidden;
  animation: fadeInUp var(--transition-normal) ease-out;
  animation-delay: 0.4s;
  animation-fill-mode: both;
  transition: all var(--transition-fast);
  backdrop-filter: blur(2px);
  width: 95vw;
  z-index: 1;
}

.code-container:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-lg);
  border-color: rgba(255, 255, 255, 0.2);
}

.code-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: var(--spacing-sm) var(--spacing-lg);
  border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(4px);
}

.language-dropdown {
  padding: var(--spacing-xs) var(--spacing-sm);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: var(--border-radius-sm);
  font-family: var(--font-handwriting);
  font-size: var(--font-size-small);
  cursor: pointer;
  transition: all var(--transition-fast);
  backdrop-filter: blur(2px);
}

.language-dropdown:hover {
  transform: translateY(-1px);
  box-shadow: var(--shadow-sm);
}

.code-actions {
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);
  margin-left: auto;
}

.code-actions button {
  padding: var(--spacing-xs);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: var(--border-radius-sm);
  background: rgba(255, 255, 255, 0.05);
  cursor: pointer;
  font-size: var(--font-size-small);
  transition: all var(--transition-fast);
  backdrop-filter: blur(2px);
}

.code-actions button:hover:not(:disabled) {
  transform: translateY(-1px) scale(1.05);
  background: rgba(255, 255, 255, 0.1);
}

.code-actions button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* Ace Editor container styling */
.code-container .ace_editor {
  font-family: "Fira Code", "Monaco", "Menlo", monospace !important;
  font-size: var(--font-size-code) !important;
  line-height: 1.5 !important;
}

.code-comment {
  width: 100%;
  min-height: 60px;
  padding: var(--spacing-sm) var(--spacing-md);
  border: none;
  border-top: 1px solid rgba(255, 255, 255, 0.1);
  font-family: var(--font-handwriting);
  font-size: var(--font-size-small);
  resize: vertical;
  transition: all var(--transition-fast);
  background: rgba(255, 255, 255, 0.02);
}

.code-comment:focus {
  outline: none;
  background: rgba(255, 255, 255, 0.05);
  transform: scale(1.002);
}

.code-comment::placeholder {
  font-style: italic;
  opacity: 0.6;
}

/* Responsive adjustments */
@media (max-width: 640px) {
  .code-header {
    flex-direction: column;
    gap: var(--spacing-sm);
    align-items: stretch;
  }

  .code-actions {
    justify-content: center;
    flex-wrap: wrap;
  }

  .language-dropdown {
    width: 100%;
  }

  .code-container .ace_editor {
    font-size: clamp(0.75rem, 3vw, 1rem) !important;
  }
}

@media (max-width: 480px) {
  .code-actions button {
    padding: 2px 4px;
    font-size: 0.7rem;
  }
}

<./src/style/Subject.css>
.subject-selector {
  display: flex;
  flex-direction: column;
  gap: var(--spacing-sm);
  min-width: 200px;
}

.subject-controls {
  display: flex;
  align-items: center;
  gap: var(--spacing-sm);
  animation: slideInLeft var(--transition-normal) ease-out;
}

.subject-dropdown {
  flex: 1;
  padding: var(--spacing-sm) var(--spacing-md);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: var(--border-radius-md);
  font-family: var(--font-handwriting);
  font-size: var(--font-size-content);
  cursor: pointer;
  transition: all var(--transition-fast);
  backdrop-filter: blur(4px);
  background: rgba(255, 255, 255, 0.1);
  position: relative;
}

.subject-dropdown:hover {
  transform: translateY(-1px) scale(1.02);
  box-shadow: var(--shadow-sm);
  border-color: rgba(255, 255, 255, 0.3);
  background: rgba(255, 255, 255, 0.15);
}

.subject-dropdown:focus {
  outline: none;
  transform: translateY(-2px) scale(1.05);
  box-shadow: var(--shadow-md);
  z-index: var(--z-dropdown);
  background: rgba(255, 255, 255, 0.2);
}

.subject-dropdown option {
  background: var(--bg-color, #1f2937);
  color: var(--text-color, #f9fafb);
  padding: var(--spacing-sm);
  font-family: var(--font-handwriting);
  animation: fadeInDown var(--transition-fast) ease-out;
}

.delete-subject {
  padding: var(--spacing-sm);
  border: 1px solid rgba(220, 38, 38, 0.3);
  border-radius: var(--border-radius-md);
  background: rgba(220, 38, 38, 0.1);
  color: #ef4444;
  cursor: pointer;
  font-size: var(--font-size-content);
  transition: all var(--transition-fast);
  backdrop-filter: blur(4px);
  min-width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.delete-subject:hover {
  transform: translateY(-2px) scale(1.1);
  background: rgba(220, 38, 38, 0.2);
  border-color: rgba(220, 38, 38, 0.5);
  box-shadow: var(--shadow-md);
}

.add-subject-form {
  display: flex;
  gap: var(--spacing-sm);
  animation: slideInDown var(--transition-normal) ease-out;
}

.subject-input {
  flex: 1;
  padding: var(--spacing-sm) var(--spacing-md);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: var(--border-radius-md);
  font-family: var(--font-handwriting);
  font-size: var(--font-size-content);
  transition: all var(--transition-fast);
  backdrop-filter: blur(4px);
  background: rgba(255, 255, 255, 0.05);
}

.subject-input:focus {
  outline: none;
  transform: scale(1.02);
  box-shadow: var(--shadow-sm);
  border-color: rgba(255, 255, 255, 0.4);
  background: rgba(255, 255, 255, 0.1);
}

.subject-input::placeholder {
  font-style: italic;
  opacity: 0.6;
}

.submit-subject {
  padding: var(--spacing-sm) var(--spacing-md);
  border: 1px solid rgba(34, 197, 94, 0.3);
  border-radius: var(--border-radius-md);
  background: rgba(34, 197, 94, 0.1);
  color: #22c55e;
  cursor: pointer;
  font-family: var(--font-handwriting);
  font-size: var(--font-size-content);
  font-weight: 500;
  transition: all var(--transition-fast);
  backdrop-filter: blur(4px);
  white-space: nowrap;
}

.submit-subject:hover {
  transform: translateY(-2px) scale(1.05);
  background: rgba(34, 197, 94, 0.2);
  border-color: rgba(34, 197, 94, 0.5);
  box-shadow: var(--shadow-md);
}

/* Responsive adjustments */
@media (max-width: 640px) {
  .subject-selector {
    min-width: auto;
  }

  .subject-controls {
    flex-direction: column;
    align-items: stretch;
  }

  .subject-dropdown {
    width: 100%;
    font-size: var(--font-size-small);
  }

  .delete-subject {
    align-self: center;
    min-width: 35px;
    height: 35px;
  }

  .add-subject-form {
    flex-direction: column;
  }

  .submit-subject {
    width: 100%;
    text-align: center;
  }
}

@media (max-width: 480px) {
  .subject-dropdown,
  .subject-input,
  .submit-subject {
    font-size: var(--font-size-small);
    padding: var(--spacing-xs) var(--spacing-sm);
  }
}

<./src/style/Layout.css>
.app-layout {
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  transition:
    background-color var(--transition-normal),
    color var(--transition-normal);
}

.main-content {
  flex: 1;
  width: 90vw;
  padding-top: 60px;
  padding-left: 0;
  padding-right: 0;
  animation: fadeInUp var(--transition-slow) ease-out;
  margin-bottom: 40%;
}
.scroll-down-btn {
  position: fixed;
  bottom: 20px;
  right: 30px;
  font-size: 2rem;
  background-color: rgba(0, 0, 0, 0.5);
  color: white;
  border: none;
  border-radius: var(--border-radius-lg);
  padding: 0 0;
  cursor: pointer;
  z-index: var(--z-navbar);
  transition: background-color var(--transition-normal);
}

.scroll-down-btn:hover {
  background-color: rgba(0, 0, 0, 0.7);
}

@media (min-width: 768px) {
  .main-content {
    padding-top: 80px;
  }
}

<./src/style/ColorPicker.css>
.color-picker-container {
  position: relative;
  display: inline-block;
}
.color-picker-trigger {
  width: 20px;
  height: 20px;
  border-radius: 50%;
  border: 2px solid rgba(255, 255, 255, 0.3);
  cursor: pointer;
  transition: all var(--transition-fast);
}

.color-picker-trigger:hover {
  transform: scale(1.2);
  box-shadow: var(--shadow-md);
  border-color: rgba(255, 255, 255, 0.5);
}

.color-picker-overlay {
  position: fixed;
  top: 0;
  left: 0; /* Fix: Changed from 'left: 100' to 'left: 0' */
  right: 0;
  bottom: 0; /* Fix: Changed from 'bottom: 50' to 'bottom: 0' for full coverage */
  background: rgba(0, 0, 0, 0.8);
  backdrop-filter: blur(4px);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1000; /* Use a high, fixed value instead of var(--z-color-picker) */
  padding: var(--spacing-xl);
  animation: fadeIn var(--transition-normal) ease-out;
}

.color-picker-modal {
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(12px);
  border-radius: var(--border-radius-xl);
  padding: var(--spacing-2xl);
  max-width: 600px;
  width: 100%;
  max-height: 50vh;
  overflow-y: auto;
  box-shadow: var(--shadow-lg);
  border: 1px solid rgba(255, 255, 255, 0.2);
  animation: scaleIn var(--transition-normal) ease-out;
}

.color-picker-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: var(--spacing-xl);
}

.color-picker-title {
  font-family: var(--font-handwriting-bold);
  font-size: var(--font-size-subheading);
  font-weight: 600;
  margin: 0;
  color: #1f2937;
}

.color-picker-close {
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  color: #6b7280;
  transition: all var(--transition-fast);
  width: 40px;
  height: 40px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.color-picker-close:hover {
  background: rgba(0, 0, 0, 0.1);
  color: #1f2937;
  transform: scale(1.1);
}

.color-palette-section {
  margin-bottom: var(--spacing-xl);
}

.palette-name {
  font-family: var(--font-handwriting-bold);
  font-size: var(--font-size-content);
  font-weight: 500;
  margin-bottom: var(--spacing-md);
  color: #374151;
  text-transform: capitalize;
}

.color-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(50px, 1fr));
  gap: var(--spacing-md);
  margin-bottom: var(--spacing-lg);
}

.color-option {
  width: 50px;
  height: 50px;
  border-radius: var(--border-radius-md);
  cursor: pointer;
  border: 3px solid transparent;
  transition: all var(--transition-fast);
  position: relative;
  overflow: hidden;
  box-shadow: var(--shadow-sm);
}

.color-option:hover {
  transform: scale(1.1);
  box-shadow: var(--shadow-lg);
  border-color: rgba(255, 255, 255, 0.8);
}

.color-option.selected {
  border-color: #000;
  transform: scale(1.15);
  box-shadow: var(--shadow-lg);
}

.color-option::after {
  content: "";
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 20px;
  height: 20px;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.9);
  opacity: 0;
  transition: all var(--transition-fast);
}

.color-option.selected::after {
  opacity: 1;
}

.color-option.selected::before {
  content: "✓";
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: #000;
  font-weight: bold;
  font-size: 14px;
  z-index: 1;
}

.color-info {
  text-align: center;
  margin-top: var(--spacing-lg);
  padding: var(--spacing-md);
  background: rgba(0, 0, 0, 0.05);
  border-radius: var(--border-radius-md);
}

.selected-color-display {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-md);
  font-family: var(--font-handwriting);
  color: #374151;
}

.selected-color-preview {
  width: 30px;
  height: 30px;
  border-radius: 50%;
  border: 2px solid #d1d5db;
}

/* Responsive adjustments */
@media (max-width: 640px) {
  .color-picker-overlay {
    padding: var(--spacing-md);
  }

  .color-picker-modal {
    padding: var(--spacing-lg);
    max-height: 90vh;
  }

  .color-grid {
    grid-template-columns: repeat(auto-fill, minmax(40px, 1fr));
    gap: var(--spacing-sm);
  }

  .color-option {
    width: 40px;
    height: 40px;
  }

  .color-picker-title {
    font-size: var(--font-size-subsubheading);
  }
}

/* Dark theme adjustments */
@media (prefers-color-scheme: dark) {
  .color-picker-modal {
    background: rgba(31, 41, 55, 0.95);
    border-color: rgba(75, 85, 99, 0.3);
  }

  .color-picker-title {
    color: #f9fafb;
  }

  .palette-name {
    color: #d1d5db;
  }

  .color-info {
    background: rgba(255, 255, 255, 0.05);
  }

  .selected-color-display {
    color: #d1d5db;
  }

  .selected-color-preview {
    border-color: #6b7280;
  }
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

<./src/style/BurgerMenu.css>
.burger-menu {
  display: block;
  position: relative;
}

.burger-icon {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 40px;
  height: 40px;
  background: none;
  border: none;
  font-size: 1.5rem;
  cursor: pointer;
  border-radius: var(--border-radius-md);
  transition: all var(--transition-fast);
  position: relative;
  z-index: 1001;
}

.burger-icon:hover {
  background: rgba(255, 255, 255, 0.1);
  transform: scale(1.1);
}

.burger-content {
  position: fixed;
  top: 0;
  right: -100%;
  width: 280px;
  height: 100vh;
  padding: 80px var(--spacing-md) var(--spacing-md);
  backdrop-filter: blur(8px);
  border-left: 1px solid rgba(255, 255, 255, 0.1);
  transition: right var(--transition-normal) ease-in-out;
  z-index: 1000;
  overflow-y: auto;
  box-shadow: -4px 0 20px rgba(0, 0, 0, 0.1);
}

.burger-content.open {
  right: 0;
  animation: slideInRight var(--transition-normal) ease-out;
}

.burger-content .navbar-controls {
  flex-direction: column;
  align-items: stretch;
  gap: var(--spacing-lg);
  margin-bottom: var(--spacing-xl);
}

.burger-content .navbar-buttons {
  flex-direction: column;
  gap: var(--spacing-sm);
}

.burger-content .nav-button {
  width: 100%;
  text-align: left;
  padding: var(--spacing-md);
  font-size: var(--font-size-content);
  justify-content: flex-start;
}

.burger-content .navbar-right {
  flex-direction: column;
  align-items: stretch;
  gap: var(--spacing-lg);
  margin-left: 0;
}

.burger-content .nav-links {
  flex-direction: column;
  gap: var(--spacing-sm);
}

.burger-content .nav-link {
  padding: var(--spacing-md);
  text-align: center;
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: var(--border-radius-md);
}

.burger-content .theme-selector {
  width: 100%;
}

.burger-content .theme-selector select {
  width: 100%;
  padding: var(--spacing-md);
  font-size: var(--font-size-content);
}

@media (min-width: 750px) {
  .burger-menu {
    display: none;
  }
}

/* Overlay for mobile menu */
.burger-content.open::before {
  content: "";
  position: fixed;
  top: 0;
  left: 0;
  right: 280px;
  bottom: 0;
  background: rgba(0, 0, 0, 0.3);
  z-index: -1;
}

<./src/style/AddImage.css>
.image-container {
  background: rgba(255, 255, 255, 0.02);
  border: 1px solid rgba(255, 255, 255, 0.1);
  border-radius: 0;
  padding: var(--spacing-md) var(--spacing-lg);
  margin: 0;
  text-align: left;
  animation: fadeInUp var(--transition-normal) ease-out;
  animation-delay: 0.5s;
  animation-fill-mode: both;
  transition: all var(--transition-fast);
  backdrop-filter: blur(2px);
  width: 95vw;
  display: flex;
  flex-direction: column;
  gap: var(--spacing-md);
}

.image-content {
  display: flex;
  align-items: flex-start;
  justify-content: space-between;
  gap: var(--spacing-md);
}

.image-preview-area {
  flex: 1;
  min-width: 0;
}

.preview-img {
  max-width: 100%;
  height: auto;
  border-radius: var(--border-radius-md);
  box-shadow: var(--shadow-md);
  transition: all var(--transition-fast);
  animation: scaleIn var(--transition-normal) ease-out;
}

.preview-img:hover {
  transform: scale(1.02);
  box-shadow: var(--shadow-lg);
}

.image-container p {
  font-family: var(--font-handwriting);
  font-size: var(--font-size-content);
  font-style: italic;
  opacity: 0.6;
  margin: var(--spacing-lg) 0;
}

.image-controls {
  display: flex;
  align-items: center;
  gap: var(--spacing-xs);
  opacity: 0;
  transform: translateX(10px);
  transition: all var(--transition-fast);
  flex-shrink: 0;
  margin-left: auto;
}

.image-container:hover .image-controls,
.image-container:focus-within .image-controls {
  opacity: 1;
  transform: translateX(0);
}

.image-controls button {
  padding: var(--spacing-xs) var(--spacing-sm);
  border: 1px solid rgba(255, 255, 255, 0.2);
  border-radius: var(--border-radius-md);
  background: rgba(255, 255, 255, 0.1);
  cursor: pointer;
  font-size: var(--font-size-content);
  transition: all var(--transition-fast);
  backdrop-filter: blur(4px);
  min-width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.image-controls button:hover {
  transform: translateY(-2px) scale(1.1);
  box-shadow: var(--shadow-md);
  background: rgba(255, 255, 255, 0.2);
}

.upload-button {
  background: rgba(59, 130, 246, 0.2) !important;
  border-color: rgba(59, 130, 246, 0.4) !important;
}

.upload-button:hover {
  background: rgba(59, 130, 246, 0.3) !important;
  border-color: rgba(59, 130, 246, 0.6) !important;
}

.image-comment {
  width: 100%;
  padding: var(--spacing-sm);
  border: 1px solid;
  border-radius: var(--border-radius-md);
  font-family: var(--font-handwriting);
  font-size: var(--font-size-small);
  transition: all var(--transition-fast);
  animation: slideInDown var(--transition-fast) ease-out;
  background: rgba(255, 255, 255, 0.05);
  backdrop-filter: blur(2px);
  z-index: 10;
}

.image-comment:focus {
  outline: none;
  transform: scale(1.02);
  box-shadow: var(--shadow-sm);
  background: rgba(255, 255, 255, 0.08);
}

.image-comment::placeholder {
  font-style: italic;
  opacity: 0.6;
}

/* Responsive adjustments */
@media (max-width: 640px) {
  .image-container {
    padding: var(--spacing-sm);
  }

  .image-controls {
    gap: var(--spacing-xs);
  }

  .image-controls button {
    min-width: 35px;
    height: 35px;
    font-size: 0.9rem;
    padding: var(--spacing-xs);
  }
}

@media (max-width: 480px) {
  .image-controls button {
    min-width: 30px;
    height: 30px;
    font-size: 0.8rem;
  }
}

/* Animation for image upload */
@keyframes slideInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes slideInDown {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

<./src/style/ConfirmationModal.css>
.confirmation-modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(0, 0, 0, 0.5);
  backdrop-filter: blur(4px);
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: var(--z-modal-overlay);
  padding: var(--spacing-md);
}

.confirmation-modal-overlay.fade-in {
  animation: fadeIn var(--transition-normal) ease-out;
}

.confirmation-modal-overlay.fade-out {
  animation: fadeOut var(--transition-normal) ease-out;
}

.confirmation-modal-content {
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(12px);
  border-radius: var(--border-radius-xl);
  padding: var(--spacing-xl);
  max-width: 400px;
  width: 100%;
  box-shadow: var(--shadow-lg);
  border: 1px solid rgba(255, 255, 255, 0.2);
  text-align: center;
  font-family: var(--font-handwriting);
  z-index: var(--z-modal);
  position: relative;
}

.confirmation-modal-content.scale-in {
  animation: modalScaleIn var(--transition-normal) ease-out;
}

.confirmation-modal-content.scale-out {
  animation: modalScaleOut var(--transition-normal) ease-out;
}

.confirmation-modal-title {
  font-family: var(--font-handwriting-bold);
  font-size: var(--font-size-subheading);
  font-weight: 600;
  margin: 0 0 var(--spacing-md) 0;
  text-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
}

.confirmation-modal-message {
  font-size: var(--font-size-content);
  line-height: 1.6;
  margin: 0 0 var(--spacing-xl) 0;
  opacity: 0.9;
}

.confirmation-modal-buttons {
  display: flex;
  gap: var(--spacing-md);
  justify-content: center;
  flex-wrap: wrap;
}

.confirmation-modal-confirm,
.confirmation-modal-cancel {
  padding: var(--spacing-sm) var(--spacing-lg);
  border: none;
  border-radius: var(--border-radius-lg);
  font-family: var(--font-handwriting);
  font-size: var(--font-size-content);
  font-weight: 500;
  cursor: pointer;
  transition: all var(--transition-fast);
  min-width: 100px;
  backdrop-filter: blur(4px);
}

.confirmation-modal-confirm:hover,
.confirmation-modal-cancel:hover {
  transform: translateY(-2px) scale(1.05);
  box-shadow: var(--shadow-md);
}

.confirmation-modal-confirm:active,
.confirmation-modal-cancel:active {
  transform: translateY(0) scale(1.02);
}

/* Animation keyframes */
@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

@keyframes fadeOut {
  from {
    opacity: 1;
  }
  to {
    opacity: 0;
  }
}

@keyframes modalScaleIn {
  from {
    opacity: 0;
    transform: scale(0.8) translateY(20px);
  }
  to {
    opacity: 1;
    transform: scale(1) translateY(0);
  }
}

@keyframes modalScaleOut {
  from {
    opacity: 1;
    transform: scale(1) translateY(0);
  }
  to {
    opacity: 0;
    transform: scale(0.8) translateY(20px);
  }
}

/* Responsive adjustments */
@media (max-width: 640px) {
  .confirmation-modal-overlay {
    padding: var(--spacing-sm);
  }

  .confirmation-modal-content {
    padding: var(--spacing-lg);
  }

  .confirmation-modal-title {
    font-size: var(--font-size-subsubheading);
  }

  .confirmation-modal-message {
    font-size: var(--font-size-small);
  }

  .confirmation-modal-buttons {
    flex-direction: column;
    gap: var(--spacing-sm);
  }

  .confirmation-modal-confirm,
  .confirmation-modal-cancel {
    width: 100%;
    min-width: auto;
  }
}

/* Dark theme adjustments */
@media (prefers-color-scheme: dark) {
  .confirmation-modal-content {
    background: rgba(31, 41, 55, 0.95);
    border-color: rgba(75, 85, 99, 0.3);
  }
}

<./src/utils/db.js>
import { openDB } from "idb";

const DB_NAME = "notesDB";
const STORE_NAME = "subjects";

export async function initDB() {
  return await openDB(DB_NAME, 1, {
    upgrade(db) {
      if (!db.objectStoreNames.contains(STORE_NAME)) {
        db.createObjectStore(STORE_NAME, { keyPath: "id" });
      }
    },
  });
}

export async function getAllSubjects() {
  const db = await initDB();
  return await db.getAll(STORE_NAME);
}

export async function putSubject(subject) {
  const db = await initDB();
  await db.put(STORE_NAME, subject);
}

export async function deleteSubjectById(id) {
  const db = await initDB();
  await db.delete(STORE_NAME, id);
}

<./src/context/ThemeContext.jsx>
import { createContext, useState, useEffect, useContext, useMemo } from "react";

const themeOptions = {
  aqua: {
    name: "Aqua",
    colors: {
      primary: "#14b8a6",
      secondary: "#2dd4bf",
      background: "#ecfeff",
      surface: "#f8fafc",
      text: "#1e293b",
      textSecondary: "#64748b",
      accent: "#22d3ee",
      border: "#d1d5db",
      hover: "#e0f2fe",
    },
  },
  deepSea: {
    name: "Deep Sea",
    colors: {
      primary: "#2563eb",
      secondary: "#3b82f6",
      background: "#0f172a",
      surface: "#1e293b",
      text: "#f8fafc",
      textSecondary: "#94a3b8",
      accent: "#60a5fa",
      border: "#475569",
      hover: "#334155",
    },
  },
  sunshine: {
    name: "Sunshine",
    colors: {
      primary: "#f59e0b",
      secondary: "#facc15",
      background: "#fefce8",
      surface: "#ffffff",
      text: "#78350f",
      textSecondary: "#a16207",
      accent: "#fb923c",
      border: "#fed7aa",
      hover: "#fef3c7",
    },
  },
  sunset: {
    name: "Sunset",
    colors: {
      primary: "#ef4444",
      secondary: "#fb923c",
      background: "#1f2937",
      surface: "#374151",
      text: "#f9fafb",
      textSecondary: "#d1d5db",
      accent: "#f87171",
      border: "#6b7280",
      hover: "#4b5563",
    },
  },
  twilight: {
    name: "Twilight",
    colors: {
      primary: "#8b5cf6",
      secondary: "#a78bfa",
      background: "#1e1b4b",
      surface: "#2e1065",
      text: "#f1f5f9",
      textSecondary: "#c4b5fd",
      accent: "#c084fc",
      border: "#4c1d95",
      hover: "#6d28d9",
    },
  },
  light: {
    name: "Light",
    colors: {
      primary: "#4b5563",
      secondary: "#6b7280",
      background: "#f9fafb",
      surface: "#ffffff",
      text: "#111827",
      textSecondary: "#6b7280",
      accent: "#3b82f6",
      border: "#e5e7eb",
      hover: "#f3f4f6",
    },
  },
  dark: {
    name: "Dark",
    colors: {
      primary: "#6b7280",
      secondary: "#9ca3af",
      background: "#111827",
      surface: "#1f2937",
      text: "#f9fafb",
      textSecondary: "#d1d5db",
      accent: "#60a5fa",
      border: "#374151",
      hover: "#4b5563",
    },
  },
  nature: {
    name: "Nature",
    colors: {
      primary: "#16a34a",
      secondary: "#22c55e",
      background: "#f0fdf4",
      surface: "#ffffff",
      text: "#14532d",
      textSecondary: "#15803d",
      accent: "#4ade80",
      border: "#bbf7d0",
      hover: "#dcfce7",
    },
  },
  forest: {
    name: "Forest",
    colors: {
      primary: "#15803d",
      secondary: "#16a34a",
      background: "#0f172a",
      surface: "#1a2e1a",
      text: "#f0fdf4",
      textSecondary: "#86efac",
      accent: "#4ade80",
      border: "#166534",
      hover: "#14532d",
    },
  },
  bubbleGum: {
    name: "Bubble Gum",
    colors: {
      primary: "#ec4899",
      secondary: "#f472b6",
      background: "#fdf2f8",
      surface: "#ffffff",
      text: "#831843",
      textSecondary: "#be185d",
      accent: "#db2777",
      border: "#f9a8d4",
      hover: "#fce7f3",
    },
  },
  cyberpunk: {
    name: "Cyberpunk",
    colors: {
      primary: "#a855f7",
      secondary: "#c084fc",
      background: "#0a0a0a",
      surface: "#1a0a1a",
      text: "#00ff88",
      textSecondary: "#ff0080",
      accent: "#00ffff",
      border: "#7c3aed",
      hover: "#581c87",
    },
  },
  goldenDark: {
    name: "Golden Dark",
    colors: {
      primary: "#d97706",
      secondary: "#f59e0b",
      background: "#1c1917",
      surface: "#292524",
      text: "#fef3c7",
      textSecondary: "#fcd34d",
      accent: "#f59e0b",
      border: "#78716c",
      hover: "#44403c",
    },
  },
};

// Create the context
export const ThemeContext = createContext();

// Initialize theme from localStorage synchronously
const getInitialTheme = () => {
  try {
    const savedTheme = localStorage.getItem("theme");
    return savedTheme && themeOptions[savedTheme] ? savedTheme : "light";
  } catch (error) {
    console.error("Error accessing localStorage for initial theme:", error);
    return "light";
  }
};

// Create a provider component
export const ThemeProvider = ({ children }) => {
  const [currentTheme, setCurrentTheme] = useState(getInitialTheme);
  const [userName, setUserName] = useState("My Notes");

  // Memoize themeOptions to prevent unnecessary re-renders
  const memoizedThemeOptions = useMemo(() => themeOptions, []);

  // Load username from localStorage on mount
  useEffect(() => {
    try {
      const savedUserName = localStorage.getItem("userName");
      if (savedUserName) {
        console.log("Loaded userName from localStorage:", savedUserName);
        setUserName(savedUserName);
      }
    } catch (error) {
      console.error("Error accessing localStorage for userName:", error);
    }
  }, []);

  // Save theme to localStorage when it changes
  useEffect(() => {
    try {
      console.log("Saving theme to localStorage:", currentTheme);
      localStorage.setItem("theme", currentTheme);
    } catch (error) {
      console.error("Error saving theme to localStorage:", error);
    }
  }, [currentTheme]);

  // Save username to localStorage when it changes
  useEffect(() => {
    try {
      console.log("Saving userName to localStorage:", userName);
      localStorage.setItem("userName", userName);
    } catch (error) {
      console.error("Error saving userName to localStorage:", error);
    }
  }, [userName]);

  // Function to update the theme
  const changeTheme = (newTheme) => {
    if (memoizedThemeOptions[newTheme]) {
      console.log("Changing theme to:", newTheme);
      setCurrentTheme(newTheme);
    } else {
      console.warn(`Theme "${newTheme}" not found, reverting to light`);
      setCurrentTheme("light");
    }
  };

  // Function to update the username
  const changeUserName = (newName) => {
    console.log("Changing userName to:", newName);
    setUserName(newName || "My Notes");
  };

  return (
    <ThemeContext.Provider
      value={{
        theme: memoizedThemeOptions[currentTheme],
        currentTheme,
        changeTheme,
        themeOptions: memoizedThemeOptions,
        userName,
        changeUserName,
      }}
    >
      {children}
    </ThemeContext.Provider>
  );
};

// Custom hook to use the theme context
export const useTheme = () => {
  const context = useContext(ThemeContext);
  if (!context) {
    throw new Error("useTheme must be used within a ThemeProvider");
  }
  return context;
};

<./src/context/ColorPaletteContext.jsx>
import { createContext, useContext } from "react";

// Define color palette options
export const colorPalettes = {
  default: ["#000000", "#333333", "#666666", "#999999"],
  primary: ["#1A535C", "#4ECDC4", "#F7FFF7", "#FF6B6B"],
  warm: ["#E63946", "#F1FAEE", "#A8DADC", "#457B9D"],
  cool: ["#5F0F40", "#9A031E", "#FB8B24", "#E36414"],
  pastel: ["#FFADAD", "#FFD6A5", "#FDFFB6", "#CAFFBF"],
  vibrant: ["#FF0000", "#00FF00", "#0000FF", "#FFFF00"],
  earth: ["#582F0E", "#7F4F24", "#936639", "#A68A64"],
  jewel: ["#480CA8", "#4895EF", "#4CC9F0", "#560BAD"],
};

// Create the context
export const ColorPaletteContext = createContext();

// Create a provider component
export const ColorPaletteProvider = ({ children }) => {
  return (
    <ColorPaletteContext.Provider value={{ colorPalettes }}>
      {children}
    </ColorPaletteContext.Provider>
  );
};

// Custom hook to use the color palette context
export const useColorPalette = () => {
  const context = useContext(ColorPaletteContext);
  if (!context) {
    throw new Error(
      "useColorPalette must be used within a ColorPaletteProvider",
    );
  }
  return context;
};

<./src/context/NotesContext.jsx>
import { createContext, useState, useEffect, useContext } from "react";
import { getSubjects, saveSubjects } from "../indexedDb";

// Create the context
export const NotesContext = createContext();

// Create a provider component
export const NotesProvider = ({ children }) => {
  const [subjects, setSubjects] = useState([]);
  const [currentSubjectId, setCurrentSubjectId] = useState(null);
  const [nextSubjectId, setNextSubjectId] = useState(2);

  useEffect(() => {
    const loadSubjects = async () => {
      const storedSubjects = await getSubjects();
      if (storedSubjects && storedSubjects.length > 0) {
        setSubjects(storedSubjects);
        setCurrentSubjectId(storedSubjects[0].id);
        const maxId = Math.max(...storedSubjects.map((s) => s.id));
        setNextSubjectId(maxId + 1);
      } else {
        const defaultSubject = [{ id: 1, name: "Default Subject", notes: [] }];
        setSubjects(defaultSubject);
        setCurrentSubjectId(1);
        setNextSubjectId(2);
      }
    };
    loadSubjects();
  }, []);

  useEffect(() => {
    if (subjects.length > 0) {
      saveSubjects(subjects);
    }
  }, [subjects]);

  const addSubject = (name) => {
    const newSubject = { id: nextSubjectId, name, notes: [] };
    const updated = [...subjects, newSubject];
    setSubjects(updated);
    setNextSubjectId(nextSubjectId + 1);
    setCurrentSubjectId(newSubject.id);
  };

  const deleteSubject = (id) => {
    if (subjects.length <= 1) {
      alert("Cannot delete the last subject.");
      return;
    }
    const updated = subjects.filter((s) => s.id !== id);
    setSubjects(updated);
    if (currentSubjectId === id) {
      setCurrentSubjectId(updated[0].id);
    }
  };

  const getNextNoteId = (notes) => {
    return notes.length === 0 ? 1 : Math.max(...notes.map((n) => n.id)) + 1;
  };

  const addNote = (type) => {
    const updated = subjects.map((subject) =>
      subject.id === currentSubjectId
        ? {
            ...subject,
            notes: [
              ...subject.notes,
              {
                id: getNextNoteId(subject.notes),
                type,
                value: "",
                language: type === "Code" ? "javascript" : undefined,
                comment: "",
                color: "#000000",
              },
            ],
          }
        : subject,
    );
    setSubjects(updated);
  };

  const updateNote = (id, newValue, newLanguage) => {
    const updated = subjects.map((subject) =>
      subject.id === currentSubjectId
        ? {
            ...subject,
            notes: subject.notes.map((note) =>
              note.id === id
                ? {
                    ...note,
                    value: newValue,
                    language: newLanguage || note.language,
                  }
                : note,
            ),
          }
        : subject,
    );
    setSubjects(updated);
  };

  const updateComment = (id, newComment) => {
    const updated = subjects.map((subject) =>
      subject.id === currentSubjectId
        ? {
            ...subject,
            notes: subject.notes.map((note) =>
              note.id === id ? { ...note, comment: newComment } : note,
            ),
          }
        : subject,
    );
    setSubjects(updated);
  };

  const updateColor = (id, newColor) => {
    const updated = subjects.map((subject) =>
      subject.id === currentSubjectId
        ? {
            ...subject,
            notes: subject.notes.map((note) =>
              note.id === id ? { ...note, color: newColor } : note,
            ),
          }
        : subject,
    );
    setSubjects(updated);
  };

  const deleteNote = (id) => {
    const updated = subjects.map((subject) =>
      subject.id === currentSubjectId
        ? { ...subject, notes: subject.notes.filter((note) => note.id !== id) }
        : subject,
    );
    setSubjects(updated);
  };

  const moveNote = (id, direction) => {
    const current = subjects.find((subject) => subject.id === currentSubjectId);
    const index = current.notes.findIndex((note) => note.id === id);
    const newIndex = index + direction;

    if (newIndex < 0 || newIndex >= current.notes.length) return;

    const updatedNotes = [...current.notes];
    [updatedNotes[index], updatedNotes[newIndex]] = [
      updatedNotes[newIndex],
      updatedNotes[index],
    ];

    const updated = subjects.map((subject) =>
      subject.id === currentSubjectId
        ? { ...subject, notes: updatedNotes }
        : subject,
    );
    setSubjects(updated);
  };

  const currentSubject = subjects.find(
    (subject) => subject.id === currentSubjectId,
  );
  const notes = currentSubject ? currentSubject.notes : [];

  return (
    <NotesContext.Provider
      value={{
        subjects,
        currentSubjectId,
        setCurrentSubjectId,
        addSubject,
        deleteSubject,
        addNote,
        updateNote,
        updateComment,
        updateColor,
        deleteNote,
        moveNote,
        notes,
        currentSubject,
      }}
    >
      {children}
    </NotesContext.Provider>
  );
};

// Custom hook to use the notes context
export const useNotes = () => {
  const context = useContext(NotesContext);
  if (!context) {
    throw new Error("useNotes must be used within a NotesProvider");
  }
  return context;
};

<./src/pages/NotesPage.jsx>
import { useTheme } from "../context/ThemeContext";
import { useNotes } from "../context/NotesContext";
import Heading from "../components/Heading";
import SubHeading from "../components/SubHeading";
import SubSubHeading from "../components/SubSubHeading";
import Content from "../components/Content";
import Code from "../components/Code";
import AddImage from "../components/AddImage";
import "../style/NotesPage.css";

function NotesPage() {
  const { theme } = useTheme();
  const { notes, updateNote, updateColor, deleteNote, moveNote } = useNotes();

  return (
    <div className="notes-page">
      <div className="notes-container">
        <div className="notes-inner">
          {notes.length === 0 ? (
            <div
              className="empty-state"
              style={{ color: theme.colors.textSecondary }}
            >
              <p>
                No notes yet. Start by adding a heading, content, or code from
                the toolbar above!
              </p>
            </div>
          ) : (
            notes.map((note) => {
              const props = {
                key: note.id,
                id: note.id,
                value: note.value,
                color: note.color || "#000000",
                onChange: updateNote,
                onColorChange: updateColor,
                onDelete: deleteNote,
                onMoveUp: () => moveNote(note.id, -1),
                onMoveDown: () => moveNote(note.id, 1),
              };

              switch (note.type) {
                case "Heading":
                  return <Heading {...props} />;
                case "SubHeading":
                  return <SubHeading {...props} />;
                case "SubSubHeading":
                  return <SubSubHeading {...props} />;
                case "Content":
                  return <Content {...props} />;
                case "Code":
                  return <Code {...props} language={note.language} />;
                case "Image":
                  return <AddImage {...props} />;
                default:
                  return null;
              }
            })
          )}
        </div>
      </div>
    </div>
  );
}

export default NotesPage;

<./src/pages/ProfilePage.jsx>
import { useState } from "react";
import { useTheme } from "../context/ThemeContext";
import { getSubjects, saveSubjects } from "../indexedDb";
import "../style/ProfilePage.css";

function ProfilePage() {
  const { theme, userName, changeUserName } = useTheme();
  const [name, setName] = useState(userName);
  const [importStatus, setImportStatus] = useState("");
  const [exportStatus, setExportStatus] = useState("");

  const handleNameChange = (e) => {
    setName(e.target.value);
  };

  const saveUserName = () => {
    changeUserName(name);
    setExportStatus("Username updated successfully!");
    setTimeout(() => setExportStatus(""), 3000);
  };

  const exportData = async () => {
    try {
      const data = await getSubjects();
      if (!data) {
        setExportStatus("No data to export");
        return;
      }

      const jsonString = JSON.stringify(data);
      const blob = new Blob([jsonString], { type: "application/json" });
      const url = URL.createObjectURL(blob);

      const a = document.createElement("a");
      a.href = url;
      a.download = `notes-export-${new Date().toISOString().slice(0, 10)}.json`;
      document.body.appendChild(a);
      a.click();

      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      setExportStatus("Data exported successfully!");
      setTimeout(() => setExportStatus(""), 3000);
    } catch (error) {
      console.error("Export failed:", error);
      setExportStatus("Export failed. Please try again.");
    }
  };

  const importData = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = async (event) => {
      try {
        const data = JSON.parse(event.target.result);
        await saveSubjects(data);
        setImportStatus("Data imported successfully!");
        setTimeout(() => setImportStatus(""), 3000);
      } catch (error) {
        console.error("Import failed:", error);
        setImportStatus("Import failed. Please check your file format.");
      }
    };
    reader.readAsText(file);
  };

  return (
    <div className="profile-page" style={{ color: theme.colors.text }}>
      <div className="profile-container">
        <h2 style={{ color: theme.colors.accent }}>User Profile</h2>

        <div className="profile-section">
          <h3>User Name</h3>
          <div className="input-group">
            <input
              type="text"
              value={name}
              onChange={handleNameChange}
              placeholder="Enter your name"
              style={{
                backgroundColor: theme.colors.background,
                color: theme.colors.text,
                borderColor: theme.colors.primary,
              }}
            />
            <button
              onClick={saveUserName}
              style={{
                backgroundColor: theme.colors.primary,
                color: theme.colors.text,
              }}
            >
              Save
            </button>
          </div>
        </div>
        <div className="profile-section">
          <h3>Keyboard Shortcuts</h3>
          <p>Enhance your productivity with these shortcuts:</p>
          <div className="shortcuts-list">
            <p>
              <kbd>Alt+N</kbd>: Go to Notes
            </p>
            <p>
              <kbd>Alt+P</kbd>: Go to Profile
            </p>
            <p>
              <kbd>Alt+1</kbd>: Add Heading
            </p>
            <p>
              <kbd>Alt+2</kbd>: Add SubHeading
            </p>
            <p>
              <kbd>Alt+3</kbd>: Add SubSubHeading
            </p>
            <p>
              <kbd>Alt+4</kbd>: Add Content
            </p>
            <p>
              <kbd>Alt+5</kbd>: Add Code
            </p>
            <p>
              <kbd>Alt+G</kbd>: Go to end of the page
            </p>
          </div>
        </div>
        <div className="profile-section">
          <h3>Data Management</h3>

          <div className="data-management">
            <div className="export-section">
              <h4>Export Data</h4>
              <p>Download all your notes as a JSON file</p>
              <button
                onClick={exportData}
                style={{
                  backgroundColor: theme.colors.primary,
                  color: theme.colors.text,
                }}
              >
                Export Notes
              </button>
              {exportStatus && <p className="status-message">{exportStatus}</p>}
            </div>

            <div className="import-section">
              <h4>Import Data</h4>
              <p>Upload a previously exported JSON file</p>
              <label
                className="import-button"
                style={{
                  backgroundColor: theme.colors.primary,
                  color: theme.colors.text,
                }}
              >
                Import Notes
                <input
                  type="file"
                  accept=".json"
                  onChange={importData}
                  style={{ display: "none" }}
                />
              </label>
              {importStatus && <p className="status-message">{importStatus}</p>}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default ProfilePage;

<./src/App.jsx>
import {
  BrowserRouter as Router,
  Routes,
  Route,
  Navigate,
} from "react-router-dom";
import { ThemeProvider } from "./context/ThemeContext";
import { ColorPaletteProvider } from "./context/ColorPaletteContext";
import { NotesProvider } from "./context/NotesContext";
import Layout from "./components/Layout";
import NotesPage from "./pages/NotesPage";
import ProfilePage from "./pages/ProfilePage";
import "./style/global.css";

function App() {
  return (
    <ThemeProvider>
      <ColorPaletteProvider>
        <NotesProvider>
          <Router>
            <Routes>
              <Route path="/" element={<Layout />}>
                <Route index element={<Navigate to="/notes" replace />} />
                <Route path="notes" element={<NotesPage />} />
                <Route path="profile" element={<ProfilePage />} />
              </Route>
            </Routes>
          </Router>
        </NotesProvider>
      </ColorPaletteProvider>
    </ThemeProvider>
  );
}

export default App;

<./src/main.jsx>
import { StrictMode } from "react";
import { createRoot } from "react-dom/client";
import "./style/global.css";
import App from "./App.jsx";

createRoot(document.getElementById("root")).render(
  <StrictMode>
    <App />
  </StrictMode>,
);

<./src/components/Heading.jsx>
import { useRef, useEffect } from "react";
import OptionsButton from "./OptionsButton";
import { useTheme } from "../context/ThemeContext";
import "../style/Heading.css";

function Heading({
  id,
  value,
  color,
  onChange,
  onColorChange,
  onDelete,
  onMoveUp,
  onMoveDown,
}) {
  const { theme } = useTheme();
  const textareaRef = useRef(null);

  useEffect(() => {
    const textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = "0px";
      const newHeight = textarea.scrollHeight;
      textarea.style.height = `${newHeight}px`;
    }
  }, [value]);

  return (
    <div
      className="heading-container"
      style={{
        borderColor: theme.colors.border,
        backgroundColor: theme.colors.surface,
      }}
    >
      <div className="heading-content">
        <h2>
          <textarea
            ref={textareaRef}
            value={value}
            onChange={(e) => onChange(id, e.target.value)}
            placeholder="Enter heading"
            className="heading-input"
            style={{
              color: color || theme.colors.text,
              backgroundColor: "transparent",
            }}
          />
        </h2>
      </div>

      <OptionsButton
        id={id}
        onColorChange={onColorChange}
        onDelete={onDelete}
        onMoveUp={onMoveUp}
        onMoveDown={onMoveDown}
        currentColor={color}
      />
    </div>
  );
}

export default Heading;

<./src/components/OptionsButton.jsx>
import { useState } from "react";
import ColorPicker from "./ColorPicker";
import "../style/OptionsButton.css";

function OptionsButton({
  id,
  onColorChange,
  onDelete,
  onMoveUp,
  onMoveDown,
  currentColor,
  canMoveUp = true,
  canMoveDown = true,
}) {
  const [isOpen, setIsOpen] = useState(false);
  const [isClosing, setIsClosing] = useState(false);

  const handleToggle = () => {
    if (isOpen) {
      setIsClosing(true);
      setTimeout(() => {
        setIsOpen(false);
        setIsClosing(false);
      }, 300);
    } else {
      setIsOpen(true);
    }
  };

  const handleDelete = () => {
    const confirmed = window.confirm(
      "Are you sure you want to delete this item?",
    );
    if (confirmed) {
      onDelete(id);
    }
    setIsOpen(false);
  };

  const handleAction = (action) => {
    action();
    setIsOpen(false);
  };

  return (
    <div className="options-container">
      {isOpen && (
        <div className={`options-menu ${isClosing ? "closing" : "open"}`}>
          <ColorPicker
            currentColor={currentColor}
            onColorChange={(color) => onColorChange(id, color)}
          />

          <button
            onClick={() => handleAction(() => onMoveUp(id))}
            disabled={!canMoveUp}
            title="Move up"
          >
            <i className="fas fa-arrow-up"></i>
          </button>

          <button
            onClick={() => handleAction(() => onMoveDown(id))}
            disabled={!canMoveDown}
            title="Move down"
          >
            <i className="fas fa-arrow-down"></i>
          </button>

          <button
            onClick={handleDelete}
            title="Delete"
            style={{ color: "#ef4444" }}
          >
            <i className="fas fa-trash"></i>
          </button>
        </div>
      )}

      <button
        className={`options-toggle ${isOpen ? "active" : ""}`}
        onClick={handleToggle}
        title="Options"
      >
        <i className="fas fa-ellipsis-h"></i>
      </button>
    </div>
  );
}

export default OptionsButton;

<./src/components/Content.jsx>
import { useRef, useEffect } from "react";
import OptionsButton from "./OptionsButton";
import { useTheme } from "../context/ThemeContext";
import "../style/Content.css";

function Content({
  id,
  value,
  color,
  onChange,
  onColorChange,
  onDelete,
  onMoveUp,
  onMoveDown,
}) {
  const { theme } = useTheme();
  const textareaRef = useRef(null);

  useEffect(() => {
    const textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = "0px";
      const newHeight = textarea.scrollHeight;
      textarea.style.height = `${newHeight}px`;
    }
  }, [value]);

  return (
    <div
      className="content-container"
      style={{ borderColor: theme.colors.primary }}
    >
      <div className="content-content">
        <p>
          <textarea
            ref={textareaRef}
            value={value}
            onChange={(e) => onChange(id, e.target.value)}
            placeholder="Enter content"
            className="content-input"
            style={{ color: color || theme.colors.text }}
          />
        </p>
      </div>

      <OptionsButton
        id={id}
        onColorChange={onColorChange}
        onDelete={onDelete}
        onMoveUp={onMoveUp}
        onMoveDown={onMoveDown}
        currentColor={color}
      />
    </div>
  );
}

export default Content;

<./src/components/Help.jsx>
import { useEffect, useState } from "react";
import { createPortal } from "react-dom";
import { useTheme } from "../context/ThemeContext";
import "../style/Help.css";

function Help() {
  const [isOpen, setIsOpen] = useState(false);
  const { theme } = useTheme();

  useEffect(() => {
    const handleKeyDown = (e) => {
      if (e.altKey && e.key.toLowerCase() === "h") {
        e.preventDefault();
        setIsOpen((prev) => !prev);
      }

      if (e.key === "Escape") {
        setIsOpen(false);
      }
    };

    document.addEventListener("keydown", handleKeyDown);
    if (isOpen) document.body.style.overflow = "hidden";

    return () => {
      document.removeEventListener("keydown", handleKeyDown);
      document.body.style.overflow = "unset";
    };
  }, [isOpen]);

  const handleOverlayClick = (e) => {
    if (e.target === e.currentTarget) {
      setIsOpen(false);
    }
  };

  const modalContent = isOpen && (
    <div
      className="help-overlay"
      onClick={handleOverlayClick}
      style={{
        background: "rgba(0, 0, 0, 0.6)",
        backdropFilter: "blur(6px)",
      }}
    >
      <div
        className="help-modal"
        style={{
          backgroundColor: theme.colors.surface,
          color: theme.colors.text,
          borderColor: theme.colors.border,
        }}
      >
        <div className="help-header">
          <h3 className="help-title">Keyboard Shortcuts</h3>
          <button
            className="help-close"
            style={{ color: theme.colors.textSecondary }}
            onClick={() => setIsOpen(false)}
          >
            <i className="fas fa-times"></i>
          </button>
        </div>

        <div className="shortcuts-list">
          <p>
            <kbd>esc</kbd>: To exit help
          </p>
          <p>
            <kbd>Alt+N</kbd>: Go to Notes
          </p>
          <p>
            <kbd>Alt+P</kbd>: Go to Profile
          </p>
          <p>
            <kbd>Alt+1</kbd>: Add Heading
          </p>
          <p>
            <kbd>Alt+2</kbd>: Add SubHeading
          </p>
          <p>
            <kbd>Alt+3</kbd>: Add SubSubHeading
          </p>
          <p>
            <kbd>Alt+4</kbd>: Add Content
          </p>
          <p>
            <kbd>Alt+5</kbd>: Add Code
          </p>
          <p>
            <kbd>Alt+G</kbd>: Scroll to Bottom
          </p>
        </div>
      </div>
    </div>
  );

  return createPortal(modalContent, document.body);
}

export default Help;

<./src/components/Navbar.jsx>
import { Link, useLocation } from "react-router-dom";
import { useTheme } from "../context/ThemeContext";
import { useNotes } from "../context/NotesContext";
import Subject from "./Subject";
import BurgerMenu from "./BurgerMenu";
import "../style/Navbar.css";

function Navbar() {
  const { theme, currentTheme, changeTheme, themeOptions, userName } =
    useTheme();
  const {
    subjects,
    currentSubjectId,
    setCurrentSubjectId,
    addSubject,
    deleteSubject,
    addNote,
  } = useNotes();
  const location = useLocation();
  const isNotesPage = location.pathname === "/notes";

  const handleThemeChange = (e) => {
    changeTheme(e.target.value);
  };

  return (
    <nav
      className="navbar"
      style={{
        color: theme.colors.text,
        borderBottomColor: theme.colors.border,
      }}
    >
      <div className="navbar-brand">
        <h1>{userName}</h1>
        {isNotesPage && (
          <Subject
            subjects={subjects}
            currentSubjectId={currentSubjectId}
            setCurrentSubjectId={setCurrentSubjectId}
            addSubject={addSubject}
            deleteSubject={deleteSubject}
          />
        )}
      </div>

      <div className="navbar-menu">
        <BurgerMenu>
          {isNotesPage && (
            <div className="navbar-controls">
              <div className="navbar-buttons">
                <button
                  className="nav-button"
                  onClick={() => addNote("Heading")}
                  style={{
                    backgroundColor: theme.colors.secondary,
                    color: theme.colors.text,
                  }}
                >
                  <i className="fas fa-heading"></i> Heading
                </button>
                <button
                  className="nav-button"
                  onClick={() => addNote("SubHeading")}
                  style={{
                    backgroundColor: theme.colors.secondary,
                    color: theme.colors.text,
                  }}
                >
                  <i className="fas fa-heading"></i> SubHeading
                </button>
                <button
                  className="nav-button"
                  onClick={() => addNote("SubSubHeading")}
                  style={{
                    backgroundColor: theme.colors.secondary,
                    color: theme.colors.text,
                  }}
                >
                  <i className="fas fa-heading"></i> SubSubHeading
                </button>
                <button
                  className="nav-button"
                  onClick={() => addNote("Content")}
                  style={{
                    backgroundColor: theme.colors.secondary,
                    color: theme.colors.text,
                  }}
                >
                  <i className="fas fa-paragraph"></i> Content
                </button>
                <button
                  className="nav-button"
                  onClick={() => addNote("Code")}
                  style={{
                    backgroundColor: theme.colors.secondary,
                    color: theme.colors.text,
                  }}
                >
                  <i className="fas fa-code"></i> Code
                </button>
                <button
                  className="nav-button"
                  onClick={() => addNote("Image")}
                  style={{
                    backgroundColor: theme.colors.secondary,
                    color: theme.colors.text,
                  }}
                >
                  <i className="fas fa-image"></i> Image
                </button>
              </div>
            </div>
          )}
          <div className="navbar-right">
            <div className="theme-selector">
              <select
                value={currentTheme}
                onChange={handleThemeChange}
                style={{
                  backgroundColor: theme.colors.surface,
                  color: theme.colors.text,
                  borderColor: theme.colors.border,
                }}
                aria-label="Select theme"
                title="Choose a theme"
              >
                {Object.keys(themeOptions).map((themeKey) => (
                  <option key={themeKey} value={themeKey}>
                    {themeOptions[themeKey].name}
                  </option>
                ))}
              </select>
            </div>
            <div className="nav-links">
              <Link
                to="/notes"
                className="nav-link"
                style={{ color: theme.colors.text }}
              >
                <i className="fas fa-sticky-note"></i> Notes
              </Link>
              <Link
                to="/profile"
                className="nav-link"
                style={{ color: theme.colors.text }}
              >
                <i className="fas fa-user"></i> Profile
              </Link>
            </div>
          </div>
        </BurgerMenu>
        <div className="navbar-desktop">
          {isNotesPage && (
            <div className="navbar-controls">
              <div className="navbar-buttons">
                <button
                  className="nav-button"
                  onClick={() => addNote("Heading")}
                  style={{
                    backgroundColor: theme.colors.secondary,
                    color: theme.colors.text,
                  }}
                >
                  <i className="fas fa-heading"></i> Heading
                </button>
                <button
                  className="nav-button"
                  onClick={() => addNote("SubHeading")}
                  style={{
                    backgroundColor: theme.colors.secondary,
                    color: theme.colors.text,
                  }}
                >
                  <i className="fas fa-heading"></i> SubHeading
                </button>
                <button
                  className="nav-button"
                  onClick={() => addNote("SubSubHeading")}
                  style={{
                    backgroundColor: theme.colors.secondary,
                    color: theme.colors.text,
                  }}
                >
                  <i className="fas fa-heading"></i> SubSubHeading
                </button>
                <button
                  className="nav-button"
                  onClick={() => addNote("Content")}
                  style={{
                    backgroundColor: theme.colors.secondary,
                    color: theme.colors.text,
                  }}
                >
                  <i className="fas fa-paragraph"></i> Content
                </button>
                <button
                  className="nav-button"
                  onClick={() => addNote("Code")}
                  style={{
                    backgroundColor: theme.colors.secondary,
                    color: theme.colors.text,
                  }}
                >
                  <i className="fas fa-code"></i> Code
                </button>
                <button
                  className="nav-button"
                  onClick={() => addNote("Image")}
                  style={{
                    backgroundColor: theme.colors.secondary,
                    color: theme.colors.text,
                  }}
                >
                  <i className="fas fa-image"></i> Image
                </button>
              </div>
            </div>
          )}
          <div className="navbar-right">
            <div className="theme-selector">
              <select
                value={currentTheme}
                onChange={handleThemeChange}
                style={{
                  backgroundColor: theme.colors.surface,
                  color: theme.colors.text,
                  borderColor: theme.colors.border,
                }}
                aria-label="Select theme"
                title="Choose a theme"
              >
                {Object.keys(themeOptions).map((themeKey) => (
                  <option key={themeKey} value={themeKey}>
                    {themeOptions[themeKey].name}
                  </option>
                ))}
              </select>
            </div>
            <div className="nav-links">
              <Link
                to="/notes"
                className="nav-link"
                style={{ color: theme.colors.text }}
              >
                <i className="fas fa-sticky-note"></i> Notes
              </Link>
              <Link
                to="/profile"
                className="nav-link"
                style={{ color: theme.colors.text }}
              >
                <i className="fas fa-user"></i> Profile
              </Link>
            </div>
          </div>
        </div>
      </div>
    </nav>
  );
}

export default Navbar;

<./src/components/ConfirmationModal.jsx>
import { useState, useEffect } from "react";
import { useTheme } from "../context/ThemeContext";
import "../style/ConfirmationModal.css";

function ConfirmationModal({
  isOpen,
  onConfirm,
  onCancel,
  title,
  message,
  confirmText = "Confirm",
  cancelText = "Cancel",
}) {
  const { theme } = useTheme();
  const [isAnimatingOut, setIsAnimatingOut] = useState(false);

  useEffect(() => {
    if (!isOpen) {
      setIsAnimatingOut(false);
    }
  }, [isOpen]);

  const handleConfirm = () => {
    onConfirm();
    animateAndClose();
  };

  const handleCancel = () => {
    animateAndClose();
  };

  const animateAndClose = () => {
    setIsAnimatingOut(true);
    setTimeout(() => {
      onCancel();
    }, 300);
  };

  if (!isOpen) return null;

  return (
    <div
      className={`confirmation-modal-overlay ${isAnimatingOut ? "fade-out" : "fade-in"}`}
    >
      <div
        className={`confirmation-modal-content ${isAnimatingOut ? "scale-out" : "scale-in"}`}
        style={{
          backgroundColor: theme.colors.surface,
          color: theme.colors.text,
          borderColor: theme.colors.border,
        }}
      >
        {title && <h3 className="confirmation-modal-title">{title}</h3>}
        <p className="confirmation-modal-message">{message}</p>
        <div className="confirmation-modal-buttons">
          <button
            onClick={handleConfirm}
            className="confirmation-modal-confirm"
            style={{
              backgroundColor: theme.colors.accent,
              color: theme.colors.background,
            }}
          >
            {confirmText}
          </button>
          <button
            onClick={handleCancel}
            className="confirmation-modal-cancel"
            style={{
              backgroundColor: theme.colors.primary,
              color: theme.colors.background,
            }}
          >
            {cancelText}
          </button>
        </div>
      </div>
    </div>
  );
}

export default ConfirmationModal;

<./src/components/SubHeading.jsx>
import { useRef, useEffect } from "react";
import OptionsButton from "./OptionsButton";
import { useTheme } from "../context/ThemeContext";
import "../style/SubHeading.css";

function SubHeading({
  id,
  value,
  color,
  onChange,
  onColorChange,
  onDelete,
  onMoveUp,
  onMoveDown,
}) {
  const { theme } = useTheme();
  const textareaRef = useRef(null);

  useEffect(() => {
    const textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = "0px";
      const newHeight = textarea.scrollHeight;
      textarea.style.height = `${newHeight}px`;
    }
  }, [value]);

  return (
    <div
      className="subheading-container"
      style={{ borderColor: theme.colors.primary }}
    >
      <div className="subheading-content">
        <h3>
          <textarea
            ref={textareaRef}
            value={value}
            onChange={(e) => onChange(id, e.target.value)}
            placeholder="Enter subheading"
            className="subheading-input"
            style={{ color: color || theme.colors.text }}
          />
        </h3>
      </div>

      <OptionsButton
        id={id}
        onColorChange={onColorChange}
        onDelete={onDelete}
        onMoveUp={onMoveUp}
        onMoveDown={onMoveDown}
        currentColor={color}
      />
    </div>
  );
}

export default SubHeading;

<./src/components/Code.jsx>
import { useState } from "react";
import AceEditor from "react-ace";
import OptionsButton from "./OptionsButton";
import { useTheme } from "../context/ThemeContext";
import "ace-builds/src-noconflict/mode-java";
import "ace-builds/src-noconflict/mode-javascript";
import "ace-builds/src-noconflict/mode-sh";
import "ace-builds/src-noconflict/mode-python";
import "ace-builds/src-noconflict/theme-monokai";
import "../style/Code.css";

const Code = ({
  id,
  value,
  language,
  color,
  onChange,
  onColorChange,
  onDelete,
  onMoveUp,
  onMoveDown,
}) => {
  const { theme } = useTheme();
  const [selectedLanguage, setSelectedLanguage] = useState(
    language || "javascript",
  );

  const handleLanguageChange = (e) => {
    const newLanguage = e.target.value;
    setSelectedLanguage(newLanguage);
    onChange(id, value, newLanguage);
  };

  const handleCodeChange = (newValue) => {
    onChange(id, newValue, selectedLanguage);
  };

  return (
    <div
      className="code-container"
      style={{ borderColor: theme.colors.primary }}
    >
      <div
        className="code-header"
        style={{ backgroundColor: theme.colors.secondary }}
      >
        <select
          value={selectedLanguage}
          onChange={handleLanguageChange}
          className="language-dropdown"
          style={{
            backgroundColor: theme.colors.background,
            color: theme.colors.text,
            borderColor: theme.colors.primary,
          }}
        >
          <option value="javascript">JavaScript</option>
          <option value="java">Java</option>
          <option value="python">Python</option>
          <option value="sh">Bash</option>
        </select>

        <OptionsButton
          id={id}
          onColorChange={onColorChange}
          onDelete={onDelete}
          onMoveUp={onMoveUp}
          onMoveDown={onMoveDown}
          currentColor={color}
        />
      </div>

      <AceEditor
        mode={selectedLanguage}
        theme="monokai"
        value={value}
        onChange={handleCodeChange}
        name={`code-editor-${id}`}
        editorProps={{ $blockScrolling: true }}
        setOptions={{
          tabSize: selectedLanguage === "python" ? 4 : 2,
          useSoftTabs: true,
          fontSize: 14,
          showPrintMargin: false,
          wrap: true,
        }}
        style={{ width: "100%", minHeight: "200px" }}
      />
    </div>
  );
};

export default Code;

<./src/components/SubSubHeading.jsx>
import { useRef, useEffect } from "react";
import OptionsButton from "./OptionsButton";
import { useTheme } from "../context/ThemeContext";
import "../style/SubSubHeading.css";

function SubSubHeading({
  id,
  value,
  color,
  onChange,
  onColorChange,
  onDelete,
  onMoveUp,
  onMoveDown,
}) {
  const { theme } = useTheme();
  const textareaRef = useRef(null);

  useEffect(() => {
    const textarea = textareaRef.current;
    if (textarea) {
      textarea.style.height = "0px";
      const newHeight = textarea.scrollHeight;
      textarea.style.height = `${newHeight}px`;
    }
  }, [value]);

  return (
    <div
      className="subsubheading-container"
      style={{ borderColor: theme.colors.primary }}
    >
      <div className="subsubheading-content">
        <h4>
          <textarea
            ref={textareaRef}
            value={value}
            onChange={(e) => onChange(id, e.target.value)}
            placeholder="Enter sub-subheading"
            className="subsubheading-input"
            style={{ color: color || theme.colors.text }}
          />
        </h4>
      </div>

      <OptionsButton
        id={id}
        onColorChange={onColorChange}
        onDelete={onDelete}
        onMoveUp={onMoveUp}
        onMoveDown={onMoveDown}
        currentColor={color}
      />
    </div>
  );
}

export default SubSubHeading;

<./src/components/BurgerMenu.jsx>
import { useState } from "react";
import { useTheme } from "../context/ThemeContext";
import "../style/BurgerMenu.css";

function BurgerMenu({ children }) {
  const { theme } = useTheme();
  const [isOpen, setIsOpen] = useState(false);

  const toggleMenu = () => {
    setIsOpen(!isOpen);
  };

  return (
    <div className="burger-menu">
      <button
        className="burger-icon"
        onClick={toggleMenu}
        style={{ color: theme.colors.text }}
      >
        <i className={`fas ${isOpen ? "fa-times" : "fa-bars"}`}></i>
      </button>
      <div
        className={`burger-content ${isOpen ? "open" : ""}`}
        style={{
          backgroundColor: "rgba(255, 255, 255, 0.1)",
          color: theme.colors.text,
        }}
      >
        {children}
      </div>
    </div>
  );
}

export default BurgerMenu;

<./src/components/ColorPicker.jsx>
import { useState, useEffect } from "react";
import { createPortal } from "react-dom"; // Add this import
import { useColorPalette } from "../context/ColorPaletteContext";
import "../style/ColorPicker.css";

function ColorPicker({ currentColor, onColorChange }) {
  const [isOpen, setIsOpen] = useState(false);
  const { colorPalettes } = useColorPalette();

  useEffect(() => {
    const handleEscape = (event) => {
      if (event.key === "Escape") {
        setIsOpen(false);
      }
    };

    if (isOpen) {
      document.addEventListener("keydown", handleEscape);
      document.body.style.overflow = "hidden";
    }

    return () => {
      document.removeEventListener("keydown", handleEscape);
      document.body.style.overflow = "unset";
    };
  }, [isOpen]);

  const handleColorSelect = (color) => {
    onColorChange(color);
    setIsOpen(false);
  };

  const handleOverlayClick = (e) => {
    if (e.target === e.currentTarget) {
      setIsOpen(false);
    }
  };

  // Portal content for the overlay
  const overlayContent = isOpen && (
    <div className="color-picker-overlay" onClick={handleOverlayClick}>
      <div className="color-picker-modal">
        <div className="color-picker-header">
          <h3 className="color-picker-title">Choose a Color</h3>
          <button
            className="color-picker-close"
            onClick={() => setIsOpen(false)}
          >
            <i className="fas fa-times"></i>
          </button>
        </div>

        {Object.entries(colorPalettes).map(([paletteName, colors]) => (
          <div key={paletteName} className="color-palette-section">
            <h4 className="palette-name">{paletteName}</h4>
            <div className="color-grid">
              {colors.map((color, index) => (
                <div
                  key={index}
                  className={`color-option ${currentColor === color ? "selected" : ""}`}
                  style={{ backgroundColor: color }}
                  onClick={() => handleColorSelect(color)}
                  title={color}
                />
              ))}
            </div>
          </div>
        ))}

        <div className="color-info">
          <div className="selected-color-display">
            <span>Selected Color:</span>
            <div
              className="selected-color-preview"
              style={{ backgroundColor: currentColor || "#000000" }}
            />
            <span>{currentColor || "#000000"}</span>
          </div>
        </div>
      </div>
    </div>
  );

  return (
    <div className="color-picker-container">
      <button
        className="color-picker-trigger"
        onClick={() => setIsOpen(true)}
        style={{
          backgroundColor: currentColor || "#000000",
        }}
        title="Choose color"
      />
      {/* Render overlay via portal */}
      {isOpen && createPortal(overlayContent, document.body)}
    </div>
  );
}

export default ColorPicker;

<./src/components/AddImage.jsx>
import { useState, useRef } from "react";
import OptionsButton from "./OptionsButton";
import { useTheme } from "../context/ThemeContext";
import "../style/AddImage.css";

function AddImage({
  id,
  value,
  color,
  onChange,
  onColorChange,
  onDelete,
  onMoveUp,
  onMoveDown,
}) {
  const { theme } = useTheme();
  const [imagePreview, setImagePreview] = useState(value || "");
  const fileInputRef = useRef();

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onloadend = () => {
      setImagePreview(reader.result);
      onChange(id, reader.result);
    };
    reader.readAsDataURL(file);
  };

  return (
    <div
      className="image-container"
      style={{ borderColor: theme.colors.primary }}
    >
      <div className="image-content">
        <div className="image-preview-area">
          {imagePreview ? (
            <img
              src={imagePreview || "/placeholder.svg"}
              alt="Uploaded"
              className="preview-img"
            />
          ) : (
            <p style={{ color: theme.colors.text }}>No image uploaded.</p>
          )}

          <input
            type="file"
            accept="image/*"
            ref={fileInputRef}
            onChange={handleImageChange}
            style={{ display: "none" }}
          />

          <button
            className="upload-button"
            onClick={() => fileInputRef.current.click()}
            title="Upload image"
            style={{
              marginTop: "16px",
              padding: "8px 16px",
              backgroundColor: theme.colors.primary,
              color: theme.colors.text,
              border: "none",
              borderRadius: "8px",
              cursor: "pointer",
            }}
          >
            <i className="fas fa-camera"></i> Upload Image
          </button>
        </div>

        <OptionsButton
          id={id}
          onColorChange={onColorChange}
          onDelete={onDelete}
          onMoveUp={onMoveUp}
          onMoveDown={onMoveDown}
          currentColor={color}
        />
      </div>
    </div>
  );
}

export default AddImage;

<./src/components/Layout.jsx>
import { Outlet, useNavigate } from "react-router-dom";
import Navbar from "./Navbar";
import { useTheme } from "../context/ThemeContext";
import { useNotes } from "../context/NotesContext";
import { useEffect } from "react";
import "../style/Layout.css";
import Help from "./Help";

function Layout() {
  const { theme } = useTheme();
  const { addNote } = useNotes();
  const navigate = useNavigate();

  useEffect(() => {
    const handleKeyDown = (event) => {
      if (event.altKey) {
        event.preventDefault();

        switch (event.key.toLowerCase()) {
          case "p":
            navigate("/profile");
            break;
          case "n":
            navigate("/notes");
            break;
          case "1":
            addNote("Heading");
            break;
          case "2":
            addNote("SubHeading");
            break;
          case "3":
            addNote("SubSubHeading");
            break;
          case "4":
            addNote("Content");
            break;
          case "5":
            addNote("Code");
            break;
          case "g":
            window.scrollBy({ top: window.innerHeight, behavior: "smooth" });
            break;
          default:
            break;
        }
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, [addNote, navigate]);

  const scrollDown = () => {
    window.scrollBy({ top: window.innerHeight, behavior: "smooth" });
  };

  return (
    <div
      className="app-layout"
      style={{
        backgroundColor: theme.colors.background,
        color: theme.colors.text,
      }}
    >
      <Navbar />
      <main className="main-content">
        <Outlet />
        <button className="scroll-down-btn" onClick={scrollDown}>
          ⬇
        </button>
      </main>
      <Help />
    </div>
  );
}

export default Layout;

<./src/components/Subject.jsx>
import { useState } from "react";
import { useTheme } from "../context/ThemeContext";
import "../style/Subject.css";

function Subject({
  subjects,
  currentSubjectId,
  setCurrentSubjectId,
  addSubject,
  deleteSubject,
}) {
  const { theme } = useTheme();
  const [newSubjectName, setNewSubjectName] = useState("");
  const [showInput, setShowInput] = useState(false);

  const handleSelectChange = (e) => {
    const value = e.target.value;
    if (value === "add-subject") {
      setShowInput(true);
    } else if (value === "") {
      // Handle empty selection
      setShowInput(false);
    } else {
      setCurrentSubjectId(Number(value));
      setShowInput(false);
    }
  };

  const handleAddSubject = (e) => {
    e.preventDefault();
    if (newSubjectName.trim()) {
      addSubject(newSubjectName.trim());
      setNewSubjectName("");
      setShowInput(false);
    }
  };

  const handleDeleteClick = () => {
    if (currentSubjectId && subjects.length > 1) {
      const confirmed = window.confirm(
        `Are you sure you want to delete this subject?`,
      );
      if (confirmed) {
        deleteSubject(currentSubjectId);
      }
    }
  };

  // Convert null to empty string for React select
  const selectValue = currentSubjectId === null ? "" : String(currentSubjectId);

  return (
    <div className="subject-selector">
      <div className="subject-controls">
        <select
          value={selectValue}
          onChange={handleSelectChange}
          className="subject-dropdown"
          style={{
            backgroundColor: theme.colors.background,
            color: theme.colors.text,
            borderColor: theme.colors.primary,
          }}
        >
          {currentSubjectId === null && (
            <option value="">Select a subject</option>
          )}
          {subjects.map((subject) => (
            <option key={subject.id} value={subject.id}>
              {subject.name}
            </option>
          ))}
          <option value="add-subject">+ Add a Subject</option>
        </select>

        {currentSubjectId && subjects.length > 1 && (
          <button
            onClick={handleDeleteClick}
            className="delete-subject"
            title="Delete subject"
          >
            <i className="fas fa-trash"></i>
          </button>
        )}
      </div>

      {showInput && (
        <form onSubmit={handleAddSubject} className="add-subject-form">
          <input
            type="text"
            value={newSubjectName}
            onChange={(e) => setNewSubjectName(e.target.value)}
            placeholder="Enter subject name"
            className="subject-input"
            style={{
              backgroundColor: theme.colors.background,
              color: theme.colors.text,
              borderColor: theme.colors.primary,
            }}
            autoFocus
          />
          <button
            type="submit"
            className="submit-subject"
            style={{
              backgroundColor: theme.colors.primary,
              color: theme.colors.text,
            }}
          >
            Add
          </button>
        </form>
      )}
    </div>
  );
}

export default Subject;

<./vite.config.js>
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})

